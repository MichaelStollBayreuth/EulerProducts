import Mathlib.Analysis.PSeries
import Mathlib.Topology.CompletelyRegular
import Mathlib.Analysis.Complex.RealDeriv
import Mathlib.Analysis.InnerProductSpace.Basic
import Mathlib.NumberTheory.LegendreSymbol.MulCharacter
import Mathlib.Topology.EMetricSpace.Paracompact
import Mathlib.Topology.MetricSpace.Polish
import Mathlib.Analysis.Calculus.Deriv.Shift

/-!
### Auxiliary lemmas
-/

namespace Nat

lemma Prime.one_le {p : ‚Ñï} (hp : p.Prime) : 1 ‚â§ p := hp.one_lt.le

lemma pow_eq_one_iff {m n : ‚Ñï} : m ^ n = 1 ‚Üî m = 1 ‚à® n = 0 := by
  refine ‚ü®fun H ‚Ü¶ ?_, fun H ‚Ü¶ ?_‚ü©
  ¬∑ rcases eq_or_ne n 0 with h | h
    ¬∑ exact Or.inr h
    ¬∑ refine Or.inl ?_
      rcases m.eq_zero_or_pos with rfl | hm
      ¬∑ simp [h] at H
      by_contra! hm'
      exact (H ‚ñ∏ (one_lt_pow_iff h).mpr <| lt_of_le_of_ne hm hm'.symm).false
  ¬∑ rcases H with rfl | rfl <;> simp

lemma pow_injective_on_primes {p q m n : ‚Ñï} (hp : p.Prime) (hq : q.Prime)
    (h : p ^ (m + 1) = q ^ (n + 1)) : p = q ‚àß m = n := by
  have H := dvd_antisymm (Prime.dvd_of_dvd_pow hp <| h ‚ñ∏ dvd_pow_self p (succ_ne_zero m))
    (Prime.dvd_of_dvd_pow hq <| h.symm ‚ñ∏ dvd_pow_self q (succ_ne_zero n))
  exact ‚ü®H, succ_inj'.mp <| Nat.pow_right_injective hq.two_le (H ‚ñ∏ h)‚ü©

end Nat


namespace Real

lemma log_le_rpow {x Œµ : ‚Ñù} (hx : 0 ‚â§ x) (hŒµ : 0 < Œµ) :
    log x ‚â§ Œµ‚Åª¬π * x ^ Œµ := by
  rcases hx.eq_or_lt with rfl | h
  ¬∑ rw [log_zero, zero_rpow hŒµ.ne', mul_zero]
  suffices : Œµ * log x ‚â§ x ^ Œµ
  ¬∑ apply_fun (Œµ‚Åª¬π * ¬∑) at this using monotone_mul_left_of_nonneg (inv_pos.mpr hŒµ).le
    simp only at this
    rwa [‚Üê mul_assoc, inv_mul_cancel hŒµ.ne', one_mul] at this
  exact (log_rpow h Œµ).symm.trans_le <| (log_le_sub_one_of_pos <| rpow_pos_of_pos h Œµ).trans
    (sub_one_lt _).le

lemma log_ofNat_le_rpow (n : ‚Ñï) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    log n ‚â§ Œµ‚Åª¬π * n ^ Œµ :=
  log_le_rpow n.cast_nonneg hŒµ

lemma not_summable_indicator_one_div_nat_cast {m : ‚Ñï} (hm : m ‚â† 0) (k : ZMod m) :
    ¬¨ Summable (Set.indicator {n : ‚Ñï | (n : ZMod m) = k} fun n : ‚Ñï ‚Ü¶ (1 / n : ‚Ñù)) := by
  have : NeZero m := { out := hm }
  suffices : ¬¨ Summable fun n : ‚Ñï ‚Ü¶ (1 / (m * n + k.val) : ‚Ñù)
  ¬∑ set f : ‚Ñï ‚Üí ‚Ñù := Set.indicator {n : ‚Ñï | (n : ZMod m) = k} fun n : ‚Ñï ‚Ü¶ (1 / n : ‚Ñù)
    contrapose! this
    let g : ‚Ñï ‚Üí ‚Ñï := fun n ‚Ü¶ m * n + k.val
    have hg : Function.Injective g
    ¬∑ intro m n hmn
      simpa [g, hm] using hmn
    have hg' : ‚àÄ n ‚àâ Set.range g, f n = 0
    ¬∑ intro n hn
      contrapose! hn
      convert Set.mem_of_indicator_ne_zero hn
      ext n
      simp only [Set.mem_range, Set.mem_setOf_eq, ZMod.nat_coe_zmod_eq_iff]
      conv => enter [1, 1, y]; rw [add_comm, eq_comm]
    convert (Function.Injective.summable_iff hg hg').mpr this with n
    simp [g]
  by_contra! h
  refine not_summable_one_div_nat_cast <| (summable_nat_add_iff 2).mp <|
    (summable_mul_left_iff (one_div_ne_zero <| Nat.cast_ne_zero.mpr hm)).mp <|
    Summable.of_nonneg_of_le (fun n ‚Ü¶ by positivity) (fun n ‚Ü¶ ?_) <| (summable_nat_add_iff 1).mpr h
  field_simp
  rw [‚Üê ZMod.nat_cast_val k]
  gcongr
  norm_cast
  linarith only [ZMod.val_le k]

end Real


namespace Complex

@[simp, norm_cast]
lemma ofNat_log {n : ‚Ñï} : Real.log n = log n := ofReal_nat_cast n ‚ñ∏ ofReal_log n.cast_nonneg

@[simp, norm_cast]
lemma ofNat_arg {n : ‚Ñï} : arg n = 0 :=
  ofReal_nat_cast n ‚ñ∏ arg_ofReal_of_nonneg n.cast_nonneg

lemma norm_log_ofNat_le_rpow (n : ‚Ñï) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚Äñlog n‚Äñ ‚â§ Œµ‚Åª¬π * n ^ Œµ := by
  rcases n.eq_zero_or_pos with rfl | h
  ¬∑ rw [Nat.cast_zero, Nat.cast_zero, log_zero, norm_zero, Real.zero_rpow hŒµ.ne', mul_zero]
  rw [norm_eq_abs, ‚Üê ofNat_log, abs_ofReal,
    _root_.abs_of_nonneg <| Real.log_nonneg <| by exact_mod_cast Nat.one_le_of_lt h.lt]
  exact Real.log_ofNat_le_rpow n hŒµ

lemma mul_cpow_ofNat (m n : ‚Ñï) (s : ‚ÑÇ) : (m * n : ‚ÑÇ) ^ s = m ^ s * n ^ s :=
  ofReal_nat_cast m ‚ñ∏ ofReal_nat_cast n ‚ñ∏ mul_cpow_ofReal_nonneg m.cast_nonneg n.cast_nonneg s

lemma ofNat_cpow_mul (n m : ‚Ñï) (z : ‚ÑÇ) : (n : ‚ÑÇ) ^ (m * z) = ((n : ‚ÑÇ) ^ m) ^ z := by
  rw [cpow_mul]
  ¬∑ rw [cpow_nat_cast]
  all_goals
    rw [‚Üê ofNat_log]
    norm_cast
    linarith [Real.pi_pos]

lemma norm_ofNat_cpow_of_re_ne_zero (n : ‚Ñï) {s : ‚ÑÇ} (hs : s.re ‚â† 0) :
    ‚Äñ(n : ‚ÑÇ) ^ s‚Äñ = (n : ‚Ñù) ^ (s.re) := by
  rw [norm_eq_abs, ‚Üê ofReal_nat_cast, abs_cpow_eq_rpow_re_of_nonneg n.cast_nonneg hs]

lemma norm_ofNat_cpow_of_pos {n : ‚Ñï} (hn : 0 < n) (s : ‚ÑÇ) :
    ‚Äñ(n : ‚ÑÇ) ^ s‚Äñ = (n : ‚Ñù) ^ (s.re) := by
  rw [norm_eq_abs, ‚Üê ofReal_nat_cast, abs_cpow_eq_rpow_re_of_pos (Nat.cast_pos.mpr hn) _]

lemma norm_ofNat_cpow_pos_of_pos {n : ‚Ñï} (hn : 0 < n) (s : ‚ÑÇ) : 0 < ‚Äñ(n : ‚ÑÇ) ^ s‚Äñ :=
  (norm_ofNat_cpow_of_pos hn _).symm ‚ñ∏ Real.rpow_pos_of_pos (Nat.cast_pos.mpr hn) _

lemma norm_prime_cpow_le_one_half (p : Nat.Primes) {s : ‚ÑÇ} (hs : 1 < s.re) :
    ‚Äñ(p : ‚ÑÇ) ^ (-s)‚Äñ ‚â§ 1 / 2 := by
  rw [norm_ofNat_cpow_of_re_ne_zero p <| by rw [neg_re]; linarith only [hs]]
  refine (Real.rpow_le_rpow_of_nonpos zero_lt_two (Nat.cast_le.mpr p.prop.two_le) <|
    by rw [neg_re]; linarith only [hs]).trans ?_
  rw [one_div, ‚Üê Real.rpow_neg_one]
  exact Real.rpow_le_rpow_of_exponent_le one_le_two <| (neg_lt_neg hs).le

lemma norm_ofNat_cpow_le_norm_ofNat_cpow_of_pos {n : ‚Ñï} (hn : 0 < n) {w z : ‚ÑÇ} (h : w.re ‚â§ z.re) :
    ‚Äñ(n : ‚ÑÇ) ^ w‚Äñ ‚â§ ‚Äñ(n : ‚ÑÇ) ^ z‚Äñ := by
  simp_rw [norm_ofNat_cpow_of_pos hn]
  exact Real.rpow_le_rpow_of_exponent_le (by exact_mod_cast hn) h

lemma indicator_ofReal {f : ‚Ñï ‚Üí ‚Ñù} {s : Set ‚Ñï} :
    (fun n ‚Ü¶ ((Set.indicator s f n : ‚Ñù) : ‚ÑÇ)) = Set.indicator s (fun n ‚Ü¶ (f n : ‚ÑÇ)) := by
  ext n
  by_cases h : n ‚àà s
  ¬∑ simp only [h, Set.indicator_of_mem]
  ¬∑ simp only [h, not_false_eq_true, Set.indicator_of_not_mem, ofReal_zero]

lemma summable_re {Œ± : Type u_1} {f : Œ± ‚Üí ‚ÑÇ} (h : Summable f) :
    Summable fun x ‚Ü¶ (f x).re :=
  HasSum.summable <| Complex.hasSum_re h.hasSum

lemma summable_im {Œ± : Type u_1} {f : Œ± ‚Üí ‚ÑÇ} (h : Summable f) :
    Summable fun x ‚Ü¶ (f x).im :=
  HasSum.summable <| Complex.hasSum_im h.hasSum

end Complex


namespace Equiv.Set

lemma prod_symm_apply {Œ± Œ≤ : Type*} (s : Set Œ±) (t : Set Œ≤) (x : s √ó t) :
    (Set.prod s t).symm x = (x.1.val, x.2.val) := rfl

/-- The canonical equivalence between `{a} √óÀ¢ t` and `t`, considered as types. -/
def prod_singleton_left {Œ± Œ≤ : Type*} (a : Œ±) (t : Set Œ≤) : ‚Üë({a} √óÀ¢ t) ‚âÉ ‚Üët where
  toFun := fun x ‚Ü¶ ‚ü®x.val.snd, (Set.mem_prod.mp x.prop).2‚ü©
  invFun := fun b ‚Ü¶ ‚ü®(a, b.val), Set.mem_prod.mpr ‚ü®Set.mem_singleton a, Subtype.mem b‚ü©‚ü©
  left_inv := by simp [Function.LeftInverse]
  right_inv := by simp [Function.RightInverse, Function.LeftInverse]

/-- The canonical equivalence between `s √óÀ¢ {b}` and `s`, considered as types. -/
def prod_singleton_right {Œ± Œ≤ : Type*} (s : Set Œ±) (b : Œ≤) : ‚Üë(s √óÀ¢ {b}) ‚âÉ ‚Üës where
  toFun := fun x ‚Ü¶ ‚ü®x.val.fst, (Set.mem_prod.mp x.prop).1‚ü©
  invFun := fun a ‚Ü¶ ‚ü®(a.val, b), Set.mem_prod.mpr ‚ü®Subtype.mem a, Set.mem_singleton b‚ü©‚ü©
  left_inv := by simp [Function.LeftInverse]
  right_inv := by simp [Function.RightInverse, Function.LeftInverse]

end Equiv.Set


lemma HasSum.tsum_fibers {Œ≤ Œ≥ : Type*} {f : Œ≤ ‚Üí ‚ÑÇ} (g : Œ≤ ‚Üí Œ≥) {a : ‚ÑÇ} (hf : HasSum f a) :
    HasSum (fun c : Œ≥ ‚Ü¶ ‚àë' b : g ‚Åª¬π' {c}, f b) a :=
  HasSum.sigma ((Equiv.hasSum_iff <| Equiv.sigmaFiberEquiv g).mpr hf) <|
    fun _ ‚Ü¶ (Summable.hasSum_iff <| Summable.subtype hf.summable _).mpr rfl

lemma tsum_setProd_eq_tsum_prod {Œ± Œ≤ : Type*} (s : Set Œ±) (t : Set Œ≤) (f : Œ± √ó Œ≤ ‚Üí ‚ÑÇ) :
    (‚àë' x : s √óÀ¢ t, f x) = ‚àë' x : s √ó t, f ((Equiv.Set.prod s t).symm x) :=
  ((Equiv.Set.prod s t).symm.tsum_eq <| (s √óÀ¢ t).restrict f).symm

lemma tsum_setProd_singleton_left {Œ± Œ≤ : Type*} (a : Œ±) (t : Set Œ≤) (f : Œ± √ó Œ≤ ‚Üí ‚ÑÇ) :
    (‚àë' x : {a} √óÀ¢ t, f x) = ‚àë' b : t, f (a, b) :=
  (Equiv.Set.prod_singleton_left a t |>.symm.tsum_eq <| ({a} √óÀ¢ t).restrict f).symm

lemma tsum_setProd_singleton_right {Œ± Œ≤ : Type*} (s : Set Œ±) (b : Œ≤) (f : Œ± √ó Œ≤ ‚Üí ‚ÑÇ) :
    (‚àë' x : s √óÀ¢ {b}, f x) = ‚àë' a : s, f (a, b) :=
  (Equiv.Set.prod_singleton_right s b |>.symm.tsum_eq <| (s √óÀ¢ {b}).restrict f).symm


namespace MulChar

@[coe]
def toMonoidWithZeroHom  {R R' : Type*} [CommMonoidWithZero R] [CommMonoidWithZero R']
    [Nontrivial R] (œá : MulChar R R') : R ‚Üí*‚ÇÄ R' where
      toFun := œá.toFun
      map_zero' := œá.map_zero
      map_one' := œá.map_one'
      map_mul' := œá.map_mul'

lemma one_apply {R : Type*} [CommMonoid R] (R' : Type*) [CommMonoidWithZero R'] {x : R}
    (hx : IsUnit x) : (1 : MulChar R R') x = 1 := by
  rw [show (1 : MulChar R R') = trivial R R' from rfl]
  simp only [trivial_apply, hx, ite_true]

end MulChar

section Topology

namespace Asymptotics

open Filter in
lemma isBigO_mul_iff_isBigO_div {Œ± F : Type*} [NormedField F] {l : Filter Œ±} {f g h : Œ± ‚Üí F}
    (hf : ‚àÄ·∂† x in l, f x ‚â† 0) :
    (fun x ‚Ü¶ f x * g x) =O[l] h ‚Üî g =O[l] (fun x ‚Ü¶ h x / f x) := by
  rw [isBigO_iff', isBigO_iff']
  refine ‚ü®fun ‚ü®c, hc, H‚ü© ‚Ü¶ ‚ü®c, hc, ?_‚ü©, fun ‚ü®c, hc, H‚ü© ‚Ü¶ ‚ü®c, hc, ?_‚ü©‚ü© <;>
  { refine H.congr <| Eventually.mp hf <| eventually_of_forall fun x hx ‚Ü¶ ?_
    rw [norm_mul, norm_div, ‚Üê mul_div_assoc, mul_comm]
    have hx' : ‚Äñf x‚Äñ > 0 := norm_pos_iff.mpr hx
    rw [le_div_iff hx', mul_comm] }

open Topology Filter in
lemma isLittleO_id (s : Set ‚Ñù) : (id : ‚Ñù ‚Üí ‚Ñù) =o[nhdsWithin 0 s] (fun _ ‚Ü¶ (1 : ‚Ñù)) :=
  ((isLittleO_one_iff ‚Ñù).mpr tendsto_id).mono nhdsWithin_le_nhds

end Asymptotics


open Topology Asymptotics in
lemma DifferentiableAt.isBigO_of_eq_zero {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} (hf : DifferentiableAt ‚ÑÇ f z)
    (hz : f z = 0) : (fun w ‚Ü¶ f (w + z)) =O[ùìù 0] id := by
  rw [‚Üê zero_add z] at hf
  have := (hf.hasDerivAt.comp_add_const 0 z).differentiableAt.isBigO_sub
  simp only [zero_add, hz, sub_zero] at this
  exact this.trans <| isBigO_refl ..

open Topology Asymptotics Filter in
lemma ContinuousAt.isBigO {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} (hf : ContinuousAt f z) :
    (fun w ‚Ü¶ f (w + z)) =O[ùìù 0] (fun _ ‚Ü¶ (1 : ‚ÑÇ)) := by
  rw [isBigO_iff']
  replace hf : ContinuousAt (fun w ‚Ü¶ f (w + z)) 0
  ¬∑ convert (Homeomorph.comp_continuousAt_iff' (Homeomorph.addLeft (-z)) _ z).mp ?_
    ¬∑ simp
    ¬∑ simp [Function.comp_def, hf]
  simp_rw [Metric.continuousAt_iff', dist_eq_norm_sub, zero_add] at hf
  specialize hf 1 zero_lt_one
  refine ‚ü®‚Äñf z‚Äñ + 1, by positivity, ?_‚ü©
  refine Eventually.mp hf <| eventually_of_forall fun w hw ‚Ü¶ le_of_lt ?_
  calc ‚Äñf (w + z)‚Äñ
    _ ‚â§ ‚Äñf z‚Äñ + ‚Äñf (w + z) - f z‚Äñ := norm_le_insert' ..
    _ < ‚Äñf z‚Äñ + 1 := add_lt_add_left hw _
    _ = _ := by simp only [norm_one, mul_one]

open Topology in
lemma Complex.isBigO_comp_ofReal {f g : ‚ÑÇ ‚Üí ‚ÑÇ} {x : ‚Ñù} (h : f =O[ùìù (x : ‚ÑÇ)] g) :
    (fun y : ‚Ñù ‚Ü¶ f y) =O[ùìù x] (fun y : ‚Ñù ‚Ü¶ g y) :=
  Asymptotics.IsBigO.comp_tendsto (k := fun y : ‚Ñù ‚Ü¶ (y : ‚ÑÇ)) h <|
    Continuous.tendsto Complex.continuous_ofReal x

open Topology in
lemma Complex.isBigO_comp_ofReal_nhds_ne {f g : ‚ÑÇ ‚Üí ‚ÑÇ} {x : ‚Ñù} (h : f =O[ùìù[‚â†] (x : ‚ÑÇ)] g) :
    (fun y : ‚Ñù ‚Ü¶ f y) =O[ùìù[‚â†] x] (fun y : ‚Ñù ‚Ü¶ g y) :=
  Asymptotics.IsBigO.comp_tendsto (k := fun y : ‚Ñù ‚Ü¶ (y : ‚ÑÇ)) h <|
    ((hasDerivAt_id (x : ‚ÑÇ)).comp_ofReal).tendsto_punctured_nhds one_ne_zero

end Topology

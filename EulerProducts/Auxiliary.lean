import Mathlib.Analysis.Complex.TaylorSeries
import Mathlib.Analysis.Complex.Positivity
import Mathlib.NumberTheory.ArithmeticFunction
import Mathlib.NumberTheory.LSeries.Deriv

/-!
### Auxiliary lemmas
-/

open Complex in
lemma continuous_cpow_natCast_neg (n : ‚Ñï) [NeZero n] : Continuous fun s : ‚ÑÇ ‚Ü¶ (n : ‚ÑÇ) ^ (-s) :=
  Continuous.const_cpow continuous_neg (.inl <| NeZero.ne (n : ‚ÑÇ))

-- not really needed here

namespace Complex

lemma summable_re {Œ± : Type _} {f : Œ± ‚Üí ‚ÑÇ} (h : Summable f) : Summable fun x ‚Ü¶ (f x).re :=
  (Complex.hasSum_re h.hasSum).summable

lemma summable_im {Œ± : Type _} {f : Œ± ‚Üí ‚ÑÇ} (h : Summable f) : Summable fun x ‚Ü¶ (f x).im :=
  (Complex.hasSum_im h.hasSum).summable

-- #find_home summable_re -- [Mathlib.Analysis.Complex.Basic]

open scoped ComplexOrder

lemma inv_natCast_pow_ofReal_pos {n : ‚Ñï} (hn : n ‚â† 0) (x : ‚Ñù) : 0 < ((n : ‚ÑÇ) ^ (x : ‚ÑÇ))‚Åª¬π := by
  refine RCLike.inv_pos_of_pos ?_
  rw [show (n : ‚ÑÇ) ^ (x : ‚ÑÇ) = (n : ‚Ñù) ^ (x : ‚ÑÇ) from rfl, ‚Üê ofReal_cpow n.cast_nonneg']
  positivity

end Complex

open Complex

open scoped ComplexOrder

namespace LSeries

private lemma inv_ofNat_cpow_ofReal_pos {n : ‚Ñï} (hn : n ‚â† 0) (x : ‚Ñù) :
    0 < ((n : ‚ÑÇ) ^ (x : ‚ÑÇ))‚Åª¬π := by
  refine RCLike.inv_pos_of_pos ?_
  rw [show (n : ‚ÑÇ) = (n : ‚Ñù) from rfl, ‚Üê ofReal_cpow (n.cast_nonneg), zero_lt_real]
  positivity


lemma term_nonneg {a : ‚Ñï ‚Üí ‚ÑÇ} {n : ‚Ñï} (h : 0 ‚â§ a n) (x : ‚Ñù) : 0 ‚â§ term a x n := by
  rw [term_def]
  rcases eq_or_ne n 0 with rfl | hn
  ¬∑ simp only [‚ÜìreduceIte, le_refl]
  ¬∑ simp only [hn, ‚ÜìreduceIte]
    refine mul_nonneg h (inv_ofNat_cpow_ofReal_pos hn x).le

lemma term_pos {a : ‚Ñï ‚Üí ‚ÑÇ} {n : ‚Ñï} (hn : n ‚â† 0) (h : 0 < a n) (x : ‚Ñù) : 0 < term a x n := by
  simp only [ne_eq, hn, not_false_eq_true, term_of_ne_zero]
  refine mul_pos h <| inv_ofNat_cpow_ofReal_pos hn x

/-- If all values of a `‚ÑÇ`-valued arithmetic function are nonnegative reals and `x` is a
real number in the domain of absolute convergence, then the `n`th iterated derivative
of the associated L-series is nonnegative real when `n` is even and nonpositive real
when `n` is odd. -/
lemma iteratedDeriv_alternating {a : ‚Ñï ‚Üí ‚ÑÇ} (hn : 0 ‚â§ a) {x : ‚Ñù}
    (h : LSeries.abscissaOfAbsConv a < x) (n : ‚Ñï) :
    0 ‚â§ (-1) ^ n * iteratedDeriv n (LSeries a) x := by
  rw [LSeries_iteratedDeriv _ h, LSeries, ‚Üê mul_assoc, ‚Üê pow_add, Even.neg_one_pow ‚ü®n, rfl‚ü©,
    one_mul]
  refine tsum_nonneg fun k ‚Ü¶ ?_
  rw [LSeries.term_def]
  split
  ¬∑ exact le_rfl
  ¬∑ refine mul_nonneg ?_ <| (inv_natCast_pow_ofReal_pos (by assumption) x).le
    induction n with
    | zero => simp only [Function.iterate_zero, id_eq]; exact hn k
    | succ n IH =>
        rw [Function.iterate_succ_apply']
        refine mul_nonneg ?_ IH
        simp only [‚Üê natCast_log, zero_le_real, Real.log_natCast_nonneg]

/-- If all values of `a : ‚Ñï ‚Üí ‚ÑÇ` are nonnegative reals and `a 1` is positive,
then `L a x` is positive real for all real `x` larger than `abscissaOfAbsConv a`. -/
lemma positive {a : ‚Ñï ‚Üí ‚ÑÇ} (ha‚ÇÄ : 0 ‚â§ a) (ha‚ÇÅ : 0 < a 1) {x : ‚Ñù} (hx : abscissaOfAbsConv a < x) :
    0 < LSeries a x := by
  rw [LSeries]
  refine tsum_pos ?_ (fun n ‚Ü¶ term_nonneg (ha‚ÇÄ n) x) 1 <| term_pos one_ne_zero ha‚ÇÅ x
  exact LSeriesSummable_of_abscissaOfAbsConv_lt_re <| by simpa only [ofReal_re] using hx

/-- If all values of `a : ‚Ñï ‚Üí ‚ÑÇ` are nonnegative reals and `a 1`
is positive, and the L-series of `a` agrees with an entire function `f` on some open
right half-plane where it converges, then `f` is real and positive on `‚Ñù`. -/
lemma positive_of_eq_differentiable {a : ‚Ñï ‚Üí ‚ÑÇ} (ha‚ÇÄ : 0 ‚â§ a) (ha‚ÇÅ : 0 < a 1)
    {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Differentiable ‚ÑÇ f) {x : ‚Ñù} (hx : abscissaOfAbsConv a < x)
    (hf' : {s | x < s.re}.EqOn f (LSeries a)) (y : ‚Ñù) :
    0 < f y := by
  have hxy : x < max x y + 1 := (le_max_left x y).trans_lt (lt_add_one _)
  have hxy' : abscissaOfAbsConv a < max x y + 1 := hx.trans <| mod_cast hxy
  have hys : (max x y + 1 : ‚ÑÇ) ‚àà {s | x < s.re} := by
    simp only [Set.mem_setOf_eq, add_re, ofReal_re, one_re, hxy]
  have hfx : 0 < f (max x y + 1) := by
    rw [hf' hys]
    convert positive ha‚ÇÄ ha‚ÇÅ hxy'
    simp only [ofReal_add, ofReal_one]
  refine (hfx.trans_le <| hf.apply_le_of_iteratedDeriv_alternating (fun n _ ‚Ü¶ ?_) ?_)
  ¬∑ have hs : IsOpen {s : ‚ÑÇ | x < s.re} := by refine isOpen_lt ?_ ?_ <;> fun_prop
    convert iteratedDeriv_alternating ha‚ÇÄ hxy' n using 2
    convert hf'.iteratedDeriv_of_isOpen hs n hys
    simp only [ofReal_add, ofReal_one]
  ¬∑ exact_mod_cast (le_max_right x y).trans (lt_add_one _).le

end LSeries

namespace ArithmeticFunction

/-- If all values of a `‚ÑÇ`-valued arithmetic function are nonnegative reals and `x` is a
real number in the domain of absolute convergence, then the `n`th iterated derivative
of the associated L-series is nonnegative real when `n` is even and nonpositive real
when `n` is odd. -/
lemma iteratedDeriv_LSeries_alternating (a : ArithmeticFunction ‚ÑÇ)
    (hn : ‚àÄ n, 0 ‚â§ a n) {x : ‚Ñù} (h : LSeries.abscissaOfAbsConv a < x) (n : ‚Ñï) :
    0 ‚â§ (-1) ^ n * iteratedDeriv n (LSeries (a ¬∑)) x :=
  LSeries.iteratedDeriv_alternating hn h n

/-- If all values of a `‚ÑÇ`-valued arithmetic function `a` are nonnegative reals and `a 1`
is positive, and the L-series of `a` agrees with an entire function `f` on some open
right half-plane where it converges, then `f` is real and positive on `‚Ñù`. -/
lemma LSeries_positive_of_eq_differentiable {a : ArithmeticFunction ‚ÑÇ} (ha‚ÇÄ : 0 ‚â§ (a ¬∑))
    (ha‚ÇÅ : 0 < a 1) {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Differentiable ‚ÑÇ f) {x : ‚Ñù}
    (hx : LSeries.abscissaOfAbsConv a < x) (hf' : {s | x < s.re}.EqOn f (LSeries a)) (y : ‚Ñù) :
    0 < f y :=
  LSeries.positive_of_eq_differentiable ha‚ÇÄ ha‚ÇÅ hf hx hf' y

end ArithmeticFunction


section Topology

open Filter

namespace Asymptotics



end Asymptotics


open Topology Asymptotics

lemma DifferentiableAt.isBigO_of_eq_zero {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} (hf : DifferentiableAt ‚ÑÇ f z)
    (hz : f z = 0) : (fun w ‚Ü¶ f (w + z)) =O[ùìù 0] id := by
  rw [‚Üê zero_add z] at hf
  simpa only [zero_add, hz, sub_zero]
    using (hf.hasDerivAt.comp_add_const 0 z).differentiableAt.isBigO_sub

lemma ContinuousAt.isBigO {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} (hf : ContinuousAt f z) :
    (fun w ‚Ü¶ f (w + z)) =O[ùìù 0] (fun _ ‚Ü¶ (1 : ‚ÑÇ)) := by
  rw [isBigO_iff']
  replace hf : ContinuousAt (fun w ‚Ü¶ f (w + z)) 0 := by
    convert (Homeomorph.comp_continuousAt_iff' (Homeomorph.addLeft (-z)) _ z).mp ?_
    ¬∑ simp
    ¬∑ simp [Function.comp_def, hf]
  simp_rw [Metric.continuousAt_iff', dist_eq_norm_sub, zero_add] at hf
  specialize hf 1 zero_lt_one
  refine ‚ü®‚Äñf z‚Äñ + 1, by positivity, ?_‚ü©
  refine Eventually.mp hf <| Eventually.of_forall fun w hw ‚Ü¶ le_of_lt ?_
  calc ‚Äñf (w + z)‚Äñ
    _ ‚â§ ‚Äñf z‚Äñ + ‚Äñf (w + z) - f z‚Äñ := norm_le_insert' ..
    _ < ‚Äñf z‚Äñ + 1 := add_lt_add_left hw _
    _ = _ := by simp only [norm_one, mul_one]

lemma Complex.isBigO_comp_ofReal {f g : ‚ÑÇ ‚Üí ‚ÑÇ} {x : ‚Ñù} (h : f =O[ùìù (x : ‚ÑÇ)] g) :
    (fun y : ‚Ñù ‚Ü¶ f y) =O[ùìù x] (fun y : ‚Ñù ‚Ü¶ g y) :=
  Asymptotics.IsBigO.comp_tendsto (k := fun y : ‚Ñù ‚Ü¶ (y : ‚ÑÇ)) h <|
    Continuous.tendsto Complex.continuous_ofReal x

lemma Complex.isBigO_comp_ofReal_nhds_ne {f g : ‚ÑÇ ‚Üí ‚ÑÇ} {x : ‚Ñù} (h : f =O[ùìù[‚â†] (x : ‚ÑÇ)] g) :
    (fun y : ‚Ñù ‚Ü¶ f y) =O[ùìù[‚â†] x] (fun y : ‚Ñù ‚Ü¶ g y) :=
  Asymptotics.IsBigO.comp_tendsto (k := fun y : ‚Ñù ‚Ü¶ (y : ‚ÑÇ)) h <|
    ((hasDerivAt_id (x : ‚ÑÇ)).comp_ofReal).tendsto_punctured_nhds one_ne_zero

end Topology

namespace Complex
-- see https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Differentiability.20of.20the.20natural.20map.20.E2.84.9D.20.E2.86.92.20.E2.84.82/near/418095234

lemma hasDerivAt_ofReal (x : ‚Ñù) : HasDerivAt ofReal 1 x :=
  HasDerivAt.ofReal_comp <| hasDerivAt_id x

lemma deriv_ofReal (x : ‚Ñù) : deriv ofReal x = 1 :=
  (hasDerivAt_ofReal x).deriv

lemma differentiableAt_ofReal (x : ‚Ñù) : DifferentiableAt ‚Ñù ofReal x :=
  (hasDerivAt_ofReal x).differentiableAt

lemma differentiable_ofReal : Differentiable ‚Ñù ofReal :=
  ofRealCLM.differentiable

-- #find_home hasDerivAt_ofReal -- [Mathlib.Analysis.SpecialFunctions.NonIntegrable]
-- Mathlib.Analysis.Complex.RealDeriv ?

end Complex

lemma DifferentiableAt.comp_ofReal {e : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚Ñù} (hf : DifferentiableAt ‚ÑÇ e z) :
    DifferentiableAt ‚Ñù (fun x : ‚Ñù ‚Ü¶ e x) z :=
  hf.hasDerivAt.comp_ofReal.differentiableAt

lemma deriv.comp_ofReal {e : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚Ñù} (hf : DifferentiableAt ‚ÑÇ e z) :
    deriv (fun x : ‚Ñù ‚Ü¶ e x) z = deriv e z :=
  hf.hasDerivAt.comp_ofReal.deriv

lemma Differentiable.comp_ofReal {e : ‚ÑÇ ‚Üí ‚ÑÇ} (h : Differentiable ‚ÑÇ e) :
    Differentiable ‚Ñù (fun x : ‚Ñù ‚Ü¶ e x) :=
  fun _ ‚Ü¶ h.differentiableAt.comp_ofReal

lemma DifferentiableAt.ofReal_comp {z : ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} (hf : DifferentiableAt ‚Ñù f z) :
    DifferentiableAt ‚Ñù (fun (y : ‚Ñù) ‚Ü¶ (f y : ‚ÑÇ)) z :=
  hf.hasDerivAt.ofReal_comp.differentiableAt

lemma Differentiable.ofReal_comp {f : ‚Ñù ‚Üí ‚Ñù} (hf : Differentiable ‚Ñù f) :
    Differentiable ‚Ñù (fun (y : ‚Ñù) ‚Ü¶ (f y : ‚ÑÇ)) :=
  fun _ ‚Ü¶ hf.differentiableAt.ofReal_comp

open Complex ContinuousLinearMap in
lemma HasDerivAt.of_hasDerivAt_ofReal_comp {z : ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} {u : ‚ÑÇ}
    (hf : HasDerivAt (fun y ‚Ü¶ (f y : ‚ÑÇ)) u z) :
    ‚àÉ u' : ‚Ñù, u = u' ‚àß HasDerivAt f u' z := by
  lift u to ‚Ñù
  ¬∑ have H := (imCLM.hasFDerivAt.comp z hf.hasFDerivAt).hasDerivAt.deriv
    simp only [Function.comp_def, imCLM_apply, ofReal_im, deriv_const] at H
    rwa [eq_comm, comp_apply, imCLM_apply, smulRight_apply, one_apply, one_smul] at H
  refine ‚ü®u, rfl, ?_‚ü©
  convert (reCLM.hasFDerivAt.comp z hf.hasFDerivAt).hasDerivAt
  rw [comp_apply, smulRight_apply, one_apply, one_smul, reCLM_apply, ofReal_re]

lemma DifferentiableAt.ofReal_comp_iff {z : ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} :
    DifferentiableAt ‚Ñù (fun (y : ‚Ñù) ‚Ü¶ (f y : ‚ÑÇ)) z ‚Üî DifferentiableAt ‚Ñù f z := by
  refine ‚ü®fun H ‚Ü¶ ?_, ofReal_comp‚ü©
  obtain ‚ü®u, _, hu‚ÇÇ‚ü© := H.hasDerivAt.of_hasDerivAt_ofReal_comp
  exact HasDerivAt.differentiableAt hu‚ÇÇ

lemma Differentiable.ofReal_comp_iff {f : ‚Ñù ‚Üí ‚Ñù} :
    Differentiable ‚Ñù (fun (y : ‚Ñù) ‚Ü¶ (f y : ‚ÑÇ)) ‚Üî Differentiable ‚Ñù f :=
  forall_congr' fun _ ‚Ü¶ DifferentiableAt.ofReal_comp_iff

lemma deriv.ofReal_comp {z : ‚Ñù} {f : ‚Ñù ‚Üí ‚Ñù} :
    deriv (fun (y : ‚Ñù) ‚Ü¶ (f y : ‚ÑÇ)) z = deriv f z := by
  by_cases hf : DifferentiableAt ‚Ñù f z
  ¬∑ exact hf.hasDerivAt.ofReal_comp.deriv
  ¬∑ have hf' := mt DifferentiableAt.ofReal_comp_iff.mp hf
    rw [deriv_zero_of_not_differentiableAt hf, deriv_zero_of_not_differentiableAt hf',
      Complex.ofReal_zero]

namespace Complex

open Nat

/-- A function that is complex differentiable on the open ball of radius `r` around `c`,
where `c` is real, and all whose iterated derivatives at `c` are real can be given by a real
differentiable function on the real open interval from `c-r` to `c+r`. -/
lemma realValued_of_iteratedDeriv_real_on_ball {f : ‚ÑÇ ‚Üí ‚ÑÇ} ‚¶Ér : ‚Ñù‚¶Ñ {c : ‚Ñù}
    (hf : DifferentiableOn ‚ÑÇ f (Metric.ball (c : ‚ÑÇ) r)) ‚¶ÉD : ‚Ñï ‚Üí ‚Ñù‚¶Ñ
    (hd : ‚àÄ n, iteratedDeriv n f c = D n) :
    ‚àÉ F : ‚Ñù ‚Üí ‚Ñù, DifferentiableOn ‚Ñù F (Set.Ioo (c - r) (c + r)) ‚àß
      Set.EqOn (f ‚àò ofReal) (ofReal ‚àò F) (Set.Ioo (c - r) (c + r)) := by
  have Hz : ‚àÄ x ‚àà Set.Ioo (c - r) (c + r), (x : ‚ÑÇ) ‚àà Metric.ball (c : ‚ÑÇ) r := by
    intro x hx
    refine Metric.mem_ball.mpr ?_
    rw [dist_eq, ‚Üê ofReal_sub, abs_ofReal, abs_sub_lt_iff, sub_lt_iff_lt_add', sub_lt_comm]
    exact and_comm.mpr hx
  have H ‚¶Éz : ‚ÑÇ‚¶Ñ (hz : z ‚àà Metric.ball (c : ‚ÑÇ) r) := taylorSeries_eq_on_ball' hz hf
  refine ‚ü®fun x ‚Ü¶ ‚àë' (n : ‚Ñï), (‚Üën !)‚Åª¬π * (D n) * (x - c) ^ n, fun x hx ‚Ü¶ ?_, fun x hx ‚Ü¶ ?_‚ü©
  ¬∑ have Hx := Hz _ hx
    refine DifferentiableAt.differentiableWithinAt ?_
    replace hf := ((hf x Hx).congr (fun _ hz ‚Ü¶ H hz) (H Hx)).differentiableAt
      (Metric.isOpen_ball.mem_nhds Hx) |>.comp_ofReal
    simp_rw [hd, ‚Üê ofReal_sub, ‚Üê ofReal_natCast, ‚Üê ofReal_inv, ‚Üê ofReal_pow, ‚Üê ofReal_mul,
      ‚Üê ofReal_tsum] at hf
    exact DifferentiableAt.ofReal_comp_iff.mp hf
  ¬∑ simp only [Function.comp_apply, ‚Üê H (Hz _ hx), hd, ofReal_tsum]
    push_cast
    rfl

/-- A function that is complex differentiable on the complex plane and all whose iterated
derivatives at a real point `c` are real can be given by a real differentiable function
on the real line. -/
lemma realValued_of_iteratedDeriv_real {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Differentiable ‚ÑÇ f) {c : ‚Ñù} {D : ‚Ñï ‚Üí ‚Ñù}
    (hd : ‚àÄ n, iteratedDeriv n f c = D n) :
    ‚àÉ F : ‚Ñù ‚Üí ‚Ñù, Differentiable ‚Ñù F ‚àß (f ‚àò ofReal) = (ofReal ‚àò F) := by
  have H (z : ‚ÑÇ) := taylorSeries_eq_of_entire' c z hf
  simp_rw [hd] at H
  refine ‚ü®fun x ‚Ü¶ ‚àë' (n : ‚Ñï), (‚Üën !)‚Åª¬π * (D n) * (x - c) ^ n, ?_, ?_‚ü©
  ¬∑ have := hf.comp_ofReal
    simp_rw [‚Üê H, ‚Üê ofReal_sub, ‚Üê ofReal_natCast, ‚Üê ofReal_inv, ‚Üê ofReal_pow, ‚Üê ofReal_mul,
      ‚Üê ofReal_tsum] at this
    exact Differentiable.ofReal_comp_iff.mp this
  ¬∑ ext x
    simp only [Function.comp_apply, ‚Üê H, ofReal_tsum, ofReal_mul, ofReal_inv, ofReal_natCast,
      ofReal_pow, ofReal_sub]

end Complex

open scoped ComplexOrder

/-- An entire function whose iterated derivatives at zero are all nonnegative real is
monotonic on the nonnegative real axis. -/
theorem monotoneOn_of_iteratedDeriv_nonneg {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hf : Differentiable ‚ÑÇ f)
    (h : ‚àÄ n, 0 ‚â§ iteratedDeriv n f 0) : MonotoneOn (f ‚àò ofReal) (Set.Ici (0 : ‚Ñù)) := by
  let D : ‚Ñï ‚Üí ‚Ñù := fun n ‚Ü¶ (iteratedDeriv n f 0).re
  have hD (n : ‚Ñï) : iteratedDeriv n f 0 = D n := by
    refine Complex.ext rfl ?_
    simp only [ofReal_im]
    exact (le_def.mp (h n)).2.symm
  obtain ‚ü®F, hFd, hF‚ü© := realValued_of_iteratedDeriv_real hf hD
  rw [hF]
  refine monotone_ofReal.comp_monotoneOn <| monotoneOn_of_deriv_nonneg (convex_Ici 0)
    hFd.continuous.continuousOn hFd.differentiableOn fun x hx ‚Ü¶ ?_
  have hD' (n : ‚Ñï) : 0 ‚â§ iteratedDeriv n (deriv f) 0 := by
    rw [‚Üê iteratedDeriv_succ']
    exact h (n + 1)
  have hf' := (contDiff_succ_iff_deriv.mp <| hf.contDiff (n := 2)).2.differentiable rfl.le
  have hx : (0 : ‚ÑÇ) ‚â§ x := by
    norm_cast
    simp only [Set.nonempty_Iio, interior_Ici', Set.mem_Ioi] at hx
    exact hx.le
  have H := Differentiable.nonneg_of_iteratedDeriv_nonneg hf' hD' hx
  rw [‚Üê deriv.comp_ofReal hf.differentiableAt] at H
  change 0 ‚â§ deriv (f ‚àò ofReal) x at H
  erw [hF, deriv.ofReal_comp] at H
  norm_cast at H

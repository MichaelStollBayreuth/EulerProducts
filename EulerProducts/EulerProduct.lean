import Mathlib.NumberTheory.EulerProduct.DirichletLSeries
import Mathlib.NumberTheory.LSeries.Dirichlet
import EulerProducts.Logarithm

/-!
# Euler products for L-series
-/

open Complex

open scoped LSeries.notation


namespace DirichletCharacter

end DirichletCharacter

namespace LSeries

-- Use this to golf `LSeries.term_convolution`
lemma term_mul_aux (a b : ‚ÑÇ) (m n : ‚Ñï) (s : ‚ÑÇ) :
    (a / m ^ s) * (b / n ^ s) = a * b / (m * n) ^ s := by
  rw [mul_comm_div, div_div, ‚Üê mul_div_assoc, mul_comm (m : ‚ÑÇ), natCast_mul_natCast_cpow]

lemma term_mul {f‚ÇÅ f‚ÇÇ f : ‚Ñï ‚Üí ‚ÑÇ} {m n : ‚Ñï} (h : f (m * n) = f‚ÇÅ m * f‚ÇÇ n) (s : ‚ÑÇ) :
    term f s (m * n) = term f‚ÇÅ s m * term f‚ÇÇ s n := by
  rcases eq_or_ne (m * n) 0 with H | H
  ¬∑ rcases mul_eq_zero.mp H with rfl | rfl <;> simp only [term_zero, mul_zero, zero_mul]
  ¬∑ obtain ‚ü®hm, hn‚ü© := mul_ne_zero_iff.mp H
    simp only [ne_eq, H, not_false_eq_true, term_of_ne_zero, Nat.cast_mul, hm, hn, h, term_mul_aux]

/-- Weak multiplicativity of `f : ‚Ñï ‚Üí ‚ÑÇ` is inherited by the terms of its L-series. -/
lemma term_multiplicative {f : ‚Ñï ‚Üí ‚ÑÇ} (hf : ‚àÄ {m n}, m.Coprime n ‚Üí f (m * n) = f m * f n) (s : ‚ÑÇ)
    {m n : ‚Ñï} (hcop : m.Coprime n) :
    term f s (m * n) = term f s m * term f s n :=
  term_mul (hf hcop) s

/-- Complete multiplicativity of `f : ‚Ñï ‚Üí ‚ÑÇ` is inherited by the terms of its L-series. -/
lemma term_completelyMultiplicative {f : ‚Ñï ‚Üí ‚ÑÇ} (hf : ‚àÄ m n, f (m * n) = f m * f n) (s : ‚ÑÇ)
    (m n : ‚Ñï) :
    term f s (m * n) = term f s m * term f s n :=
  term_mul (hf m n) s

lemma term_at_one {f : ‚Ñï ‚Üí ‚ÑÇ} (h‚ÇÅ : f 1 = 1) (s : ‚ÑÇ) : term f s 1 = 1 := by
  rw [term_of_ne_zero one_ne_zero, h‚ÇÅ, Nat.cast_one, one_cpow, div_one]

end LSeries

section eulerProduct

open Nat BigOperators Filter Topology EulerProduct

namespace LSeries

/-- The Euler product for the L-series of a weakly multiplicative sequence `f` -/
lemma eulerProduct_of_multiplicative {f : ‚Ñï ‚Üí ‚ÑÇ} (h‚ÇÅ : f 1 = 1)
    (hf : ‚àÄ {m n}, m.Coprime n ‚Üí f (m * n) = f m * f n) {s : ‚ÑÇ} (hs : LSeriesSummable f s) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n, ‚àë' e, term f s (p ^ e)) atTop (ùìù (L f s)) :=
  eulerProduct (term_at_one h‚ÇÅ s) (term_multiplicative hf s) hs.norm (term_zero ..)

/-- The Euler product for the L-series of a completely multiplicative sequence `f` -/
lemma eulerProduct_of_completelyMultiplicative {f : ‚Ñï ‚Üí ‚ÑÇ} (h‚ÇÅ : f 1 = 1)
    (hf : ‚àÄ m n, f (m * n) = f m * f n) {s : ‚ÑÇ} (hs : LSeriesSummable f s) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n, (1 - term f s p)‚Åª¬π) atTop (ùìù (L f s)) :=
  eulerProduct_completely_multiplicative
    (f := { toFun := term f s,
            map_zero' := term_zero ..,
            map_one' := term_at_one h‚ÇÅ s,
            map_mul' := term_completelyMultiplicative hf s })
    hs.norm

/-- The Euler product for the L-series of a completely multiplicative sequence `f`,
logarithmic version -/
lemma eulerProduct_of_completelyMultiplicative' {f : ‚Ñï ‚Üí ‚ÑÇ} (h‚ÇÅ : f 1 = 1)
    (hf : ‚àÄ m n, f (m * n) = f m * f n) {s : ‚ÑÇ} (hs : LSeriesSummable f s) :
    exp (‚àë' p : Nat.Primes, -log (1 - term f s p)) = L f s :=
  exp_sum_primes_log_eq_tsum' (term_zero ..) (term_at_one h‚ÇÅ s)
    (term_completelyMultiplicative hf s) hs.norm

end LSeries

open LSeries

namespace DirichletCharacter

lemma toFun_on_nat_map_one {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) : ‚Üóœá 1 = 1 := by
  simp only [cast_one, map_one]

lemma toFun_on_nat_map_mul {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) (m n : ‚Ñï) :
    ‚Üóœá (m * n) = ‚Üóœá m * ‚Üóœá n := by
  simp only [cast_mul, map_mul]

/-- The Euler product formula for a Dirichlet L-series -/
theorem LSeries_eulerProduct {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) {s : ‚ÑÇ} (hs : 1 < s.re) :
    Tendsto (fun n ‚Ü¶ ‚àè p in primesBelow n, (1 - œá p * (p : ‚ÑÇ) ^ (-s))‚Åª¬π) atTop (ùìù (L ‚Üóœá s)) := by
  refine Tendsto.congr (fun n ‚Ü¶ Finset.prod_congr rfl fun p hp ‚Ü¶ ?_) <|
    eulerProduct_of_completelyMultiplicative (toFun_on_nat_map_one œá) (toFun_on_nat_map_mul œá) <|
    LSeriesSummable_of_one_lt_re œá hs
  rw [term_of_ne_zero (prime_of_mem_primesBelow hp).ne_zero, cpow_neg, div_eq_mul_inv]

/-- A variant of the Euler product for Dirichlet L-series. -/
theorem LSeries_eulerProduct' {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) {s : ‚ÑÇ} (hs : 1 < s.re) :
    exp (‚àë' p : Nat.Primes, -log (1 - œá p * p ^ (-s))) = L ‚Üóœá s := by
  rw [LSeries]
  convert exp_sum_primes_log_eq_tsum (f := dirichletSummandHom œá <| ne_zero_of_one_lt_re hs) <|
    summable_dirichletSummand œá hs -- where does the `x‚úù: ‚Ñï` come from??
  ext n
  rcases eq_or_ne n 0 with rfl | hn
  ¬∑ simp only [term_zero, map_zero]
  ¬∑ simp [hn, dirichletSummandHom, div_eq_mul_inv, cpow_neg]

end DirichletCharacter

open DirichletCharacter

/-- A variant of the Euler product for the L-series of `Œ∂`. -/
theorem ArithmeticFunction.LSeries_zeta_eulerProduct' {s : ‚ÑÇ} (hs : 1 < s.re) :
    exp (‚àë' p : Nat.Primes, -Complex.log (1 - p ^ (-s))) = L 1 s := by
  convert modOne_eq_one (R := ‚ÑÇ) ‚ñ∏ LSeries_eulerProduct' (1 : DirichletCharacter ‚ÑÇ 1) hs using 7
  rw [MulChar.one_apply <| isUnit_of_subsingleton _, one_mul]

/-- A variant of the Euler product for the Riemann zeta function. -/
theorem riemannZeta_eulerProduct' {s : ‚ÑÇ} (hs : 1 < s.re) :
    exp (‚àë' p : Nat.Primes, -Complex.log (1 - p ^ (-s))) = riemannZeta s :=
  LSeries_one_eq_riemannZeta hs ‚ñ∏ ArithmeticFunction.LSeries_zeta_eulerProduct' hs

end eulerProduct

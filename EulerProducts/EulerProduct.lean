import EulerProducts.Basic

namespace EulerProduct

open scoped Topology

open BigOperators

variable {F : Type*} [NormedField F] [CompleteSpace F] {f : ‚Ñï ‚Üí F}
variable (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) (hmul : ‚àÄ {m n}, Nat.Coprime m n ‚Üí f (m * n) = f m * f n)

lemma map_prime_pow_mul {p : ‚Ñï} (hp : p.Prime) (e : ‚Ñï) {m : p.smoothNumbers} :
    f (p ^ e * m) = f (p ^ e) * f m :=
  hmul <| Nat.Coprime.pow_left _ <| hp.smoothNumbers_coprime <| Subtype.mem m

lemma hasSum_singleton (m : ‚Ñï) (f : ‚Ñï ‚Üí F) : HasSum (fun x : ({m} : Set ‚Ñï) ‚Ü¶ f x) (f m) := by
  convert_to HasSum (fun x : ({m} : Set ‚Ñï) ‚Ü¶ f x) (f (‚ü®m, rfl‚ü© : ({m} : Set ‚Ñï)))
  exact hasSum_single (Œ± := F) _ <| fun m' h ‚Ü¶ False.elim <| h <| Subtype.ext m'.2

open Nat in
/-- This is the key lemma that relates a finite product over primes to a partial
infinite sum. -/
lemma hasSum_prod_tsum_primesBelow (hsum : ‚àÄ {p : ‚Ñï}, p.Prime ‚Üí Summable (fun n : ‚Ñï ‚Ü¶ ‚Äñf (p ^ n)‚Äñ))
    (N : ‚Ñï) :
    Summable (fun m : N.smoothNumbers ‚Ü¶ ‚Äñf m‚Äñ) ‚àß
      HasSum (fun m : N.smoothNumbers ‚Ü¶ f m) (‚àè p in N.primesBelow, ‚àë' (n : ‚Ñï), f (p ^ n)) := by
  induction' N with N ih
  ¬∑ rw [smoothNumbers_zero, primesBelow_zero, Finset.prod_empty]
    exact ‚ü®Set.Finite.summable (Set.finite_singleton 1) (‚Äñf ¬∑‚Äñ), hf‚ÇÅ ‚ñ∏ hasSum_singleton 1 f‚ü©
  ¬∑ rw [primesBelow_succ]
    split_ifs with hN
    ¬∑ constructor
      ¬∑ rw [‚Üê (equivProdNatSmoothNumbers hN).summable_iff]
        simp_rw [Function.comp_def, equivProdNatSmoothNumbers_apply', map_prime_pow_mul hmul hN,
                 norm_mul]
        conv at ih => conv in (‚Äñf _‚Äñ) => rw [‚Üê norm_norm]
        have hs := hsum hN
        conv at hs => enter [1]; conv in (‚Äñf _‚Äñ) => rw [‚Üê norm_norm]
        -- `exact summable_mul_of_summable_norm hs ih.1` gives a time-out
        have := summable_mul_of_summable_norm hs ih.1
        exact this
      ¬∑ rw [Finset.prod_insert (not_mem_primesBelow N), ‚Üê (equivProdNatSmoothNumbers hN).hasSum_iff]
        simp_rw [Function.comp_def, equivProdNatSmoothNumbers_apply', map_prime_pow_mul hmul hN]
        -- below, `(Œ± := F)` seems to be necessary to avoid a time-out
        apply HasSum.mul (Œ± := F) (Summable.hasSum <| summable_of_summable_norm <| hsum hN) ih.2
        -- `exact summable_mul_of_summable_norm (hsum hN) ih.1` gives a time-out
        have := summable_mul_of_summable_norm (hsum hN) ih.1
        exact this
    ¬∑ rwa [smoothNumbers_succ hN]

-- We now assume that `f` is norm-summable.
variable (hsum : Summable (‚Äñf ¬∑‚Äñ))

lemma prod_primesBelow_tsum_eq_tsum_smoothNumbers (N : ‚Ñï) :
    ‚àè p in N.primesBelow, ‚àë' (n : ‚Ñï), f (p ^ n) = ‚àë' m : N.smoothNumbers, f m :=
  (hasSum_prod_tsum_primesBelow hf‚ÇÅ hmul
    (fun hp ‚Ü¶ hsum.comp_injective <| Nat.pow_right_injective hp.one_lt) _).2.tsum_eq.symm

-- Can simplify when #8194 is merged
lemma tail_estimate' {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) :
     ‚àÉ N : ‚Ñï, ‚àÄ s ‚äÜ {n | N ‚â§ n}, ‚Äñ‚àë' m : s, f m‚Äñ ‚â§ Œµ := by
  obtain ‚ü®t, ht‚ü© := summable_iff_vanishing.mp hsum _ (Metric.closedBall_mem_nhds 0 Œµpos)
  use if emp : t.Nonempty then t.max' emp + 1 else 0
  refine fun s hs ‚Ü¶ (norm_tsum_le_tsum_norm <| hsum.subtype _).trans ?_
  refine tsum_le_of_sum_le (hsum.subtype _) fun s' ‚Ü¶ (le_abs_self _).trans ?_
  rw [‚Üê Finset.sum_subtype_map_embedding (g := fun i ‚Ü¶ ‚Äñf i‚Äñ) fun _ _ ‚Ü¶ rfl]
  simp_rw [mem_closedBall_zero_iff, Real.norm_eq_abs, Finset.disjoint_left] at ht
  refine ht _ fun n hns' hnt ‚Ü¶ ?_
  obtain ‚ü®‚ü®m, hms‚ü©, -, rfl‚ü© := Finset.mem_map.mp hns'
  have := hs hms
  split_ifs at this with h
  ¬∑ exact (t.le_max' _ hnt).not_lt ((Nat.lt_succ_self _).trans_le this)
  ¬∑ exact h ‚ü®m, hnt‚ü©

lemma norm_tsum_smoothNumbers_sub_tsum_lt {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) :
    ‚àÉ N‚ÇÄ : ‚Ñï, ‚àÄ N ‚â• N‚ÇÄ, ‚Äñ(‚àë' m : N.smoothNumbers, f m) - (‚àë' m : ‚Ñï, f m)‚Äñ < Œµ := by
  conv =>
    enter [1, N‚ÇÄ, N]
    rw [‚Üê tsum_subtype_add_tsum_subtype_compl (summable_of_summable_norm hsum) N.smoothNumbers,
        ‚Üê sub_sub, sub_self, zero_sub, norm_neg, tsum_nat_eq_tsum_diff_zero (N.smoothNumbers)·∂ú hf‚ÇÄ]
  obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© := tail_estimate' hsum <| half_pos Œµpos
  refine ‚ü®N‚ÇÄ, fun N hN‚ÇÅ ‚Ü¶ (hN‚ÇÄ _ ?_).trans_lt <| half_lt_self Œµpos‚ü©
  exact (Nat.smoothNumbers_compl _).trans fun n ‚Ü¶ hN‚ÇÅ.le.trans

open Filter Nat in
/-- The *Euler Product* for multiplicative (on coprime arguments) functions.
If `f : ‚Ñï ‚Üí F`, where `F` is a complete normed field, `f 0 = 0`,
`f 1 = 1`, `f` is multiplicative on coprime arguments,
and `‚Äñf ¬∑‚Äñ` is summable, then `‚àè' p : {p : ‚Ñï | p.Prime}, ‚àë' e, f (p ^ e) = ‚àë' n, f n`.
Since there are no infinite products yet in Mathlib, we state it in the form of
convergence of finite partial products. -/
theorem euler_product :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n, ‚àë' e, f (p ^ e)) atTop (ùìù (‚àë' n, f n)) := by
  rw [Metric.tendsto_nhds]
  intro Œµ Œµpos
  simp only [Finset.mem_range, eventually_atTop, ge_iff_le]
  obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© := norm_tsum_smoothNumbers_sub_tsum_lt hf‚ÇÄ hsum Œµpos
  use N‚ÇÄ
  convert hN‚ÇÄ using 3 with m
  rw [dist_eq_norm]
  congr 2
  exact prod_primesBelow_tsum_eq_tsum_smoothNumbers hf‚ÇÅ hmul hsum m

open Filter Nat in
/-- The *Euler Product* for completely multiplicative functions.
If `f : ‚Ñï ‚Üí*‚ÇÄ F`, where `F` is a complete normed field
and `‚Äñf ¬∑‚Äñ` is summable, then `‚àè' p : {p : ‚Ñï | p.Prime}, (1 - f p)‚Åª¬π = ‚àë' n, f n`.
Since there are no infinite products yet in Mathlib, we state it in the form of
convergence of finite partial products. -/
theorem euler_product_multiplicative {f : ‚Ñï ‚Üí*‚ÇÄ F} (hsum : Summable fun x => ‚Äñf x‚Äñ) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n, (1 - f p)‚Åª¬π) atTop (ùìù (‚àë' n, f n)) := by
  have hf‚ÇÄ : f 0 = 0 := MonoidWithZeroHom.map_zero f
  have hf‚ÇÅ : f 1 = 1 := MonoidWithZeroHom.map_one f
  have hmul {m n} (_ : Nat.Coprime m n) : f (m * n) = f m * f n := MonoidWithZeroHom.map_mul f m n
  convert euler_product hf‚ÇÄ hf‚ÇÅ hmul hsum with N p hN
  simp_rw [map_pow]
  refine (tsum_geometric_of_norm_lt_1 <| summable_geometric_iff_norm_lt_1.mp ?_).symm
  refine summable_of_summable_norm ?_
  convert hsum.comp_injective <| Nat.pow_right_injective (prime_of_mem_primesBelow hN).one_lt
  simp

end EulerProduct

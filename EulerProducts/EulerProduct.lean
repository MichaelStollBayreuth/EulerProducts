import EulerProducts.Basic
import Mathlib.Analysis.SpecificLimits.Normed
import Mathlib.Analysis.Normed.Field.InfiniteSum

set_option autoImplicit false

namespace EulerProduct

open scoped Topology

open BigOperators

-- We work with series indexed by the natural numbers
-- and with terms in a complete normed field `F`.
variable {F : Type*} [NormedField F] [CompleteSpace F] {f : ‚Ñï ‚Üí F}

-- We assume that `f` is *multiplicative* in the sense of arithmetic functions,
-- i.e., multiplicative on coprime elements.
-- The condition `f 1 = 1` is then equivalent to `f 1 ‚â† 0`, but more convenient to use.
variable (hf‚ÇÅ : f 1 = 1) (hmul : ‚àÄ {m n}, Nat.Coprime m n ‚Üí f (m * n) = f m * f n)

lemma map_prime_pow_mul {p : ‚Ñï} (hp : p.Prime) (e : ‚Ñï) {m : p.smoothNumbers} :
    f (p ^ e * m) = f (p ^ e) * f m :=
  hmul <| Nat.Coprime.pow_left _ <| hp.smoothNumbers_coprime <| Subtype.mem m

open Nat in
/-- This relates a finite product over primes to an infinite sum over smooth numbers. -/
lemma summable_and_hasSum_smoothNumbers_prod_primesBelow_tsum
    (hsum : ‚àÄ {p : ‚Ñï}, p.Prime ‚Üí Summable (fun n : ‚Ñï ‚Ü¶ ‚Äñf (p ^ n)‚Äñ)) (N : ‚Ñï) :
    Summable (fun m : N.smoothNumbers ‚Ü¶ ‚Äñf m‚Äñ) ‚àß
      HasSum (fun m : N.smoothNumbers ‚Ü¶ f m) (‚àè p in N.primesBelow, ‚àë' (n : ‚Ñï), f (p ^ n)) := by
  induction' N with N ih
  ¬∑ rw [smoothNumbers_zero, primesBelow_zero, Finset.prod_empty]
    exact ‚ü®Set.Finite.summable (Set.finite_singleton 1) (‚Äñf ¬∑‚Äñ), hf‚ÇÅ ‚ñ∏ hasSum_singleton 1 f‚ü©
  ¬∑ rw [primesBelow_succ]
    split_ifs with hN
    ¬∑ constructor
      ¬∑ simp_rw [‚Üê (equivProdNatSmoothNumbers hN).summable_iff, Function.comp_def,
                 equivProdNatSmoothNumbers_apply', map_prime_pow_mul hmul hN, norm_mul]
        apply summable_mul_of_summable_norm (f := fun (x : ‚Ñï) ‚Ü¶ ‚Äñf (N ^ x)‚Äñ)
          (g := fun (x : N.smoothNumbers) ‚Ü¶ ‚Äñf x.val‚Äñ) <;>
          simp_rw [norm_norm]
        exacts [hsum hN, ih.1]
      ¬∑ simp_rw [Finset.prod_insert (not_mem_primesBelow N),
                 ‚Üê (equivProdNatSmoothNumbers hN).hasSum_iff, Function.comp_def,
                 equivProdNatSmoothNumbers_apply', map_prime_pow_mul hmul hN]
        -- below, `(Œ± := F)` seems to be necessary to avoid a time-out
        apply HasSum.mul (Œ± := F) (Summable.hasSum <| summable_of_summable_norm <| hsum hN) ih.2
        -- `exact summable_mul_of_summable_norm (hsum hN) ih.1` gives a time-out
        convert summable_mul_of_summable_norm (hsum hN) ih.1
    ¬∑ rwa [smoothNumbers_succ hN]

open Nat in
/-- Given a (completely) multiplicative function `f : ‚Ñï ‚Üí F`, where `F` is a normed field,
such that `‚Äñf p‚Äñ < 1` for all primes `p`, we can express the sum of `f n` over all `N`-smooth
positive integers `n` as a product of `(1 - f p)‚Åª¬π` over the primes `p < N`. At the same time,
we show that the sum involved converges absolutely. -/
lemma summable_and_hasSum_smoothNumbers_prod_primesBelow_geometric {f : ‚Ñï ‚Üí* F}
    (h : ‚àÄ {p : ‚Ñï}, p.Prime ‚Üí ‚Äñf p‚Äñ < 1) (N : ‚Ñï) :
    Summable (fun m : N.smoothNumbers ‚Ü¶ ‚Äñf m‚Äñ) ‚àß
      HasSum (fun m : N.smoothNumbers ‚Ü¶ f m) (‚àè p in N.primesBelow, (1 - f p)‚Åª¬π) := by
  have hmul {m n} (_ : Nat.Coprime m n) := f.map_mul m n
  convert summable_and_hasSum_smoothNumbers_prod_primesBelow_tsum f.map_one hmul ?_ N with M hM <;>
    simp_rw [map_pow]
  ¬∑ exact (tsum_geometric_of_norm_lt_1 <| h <| prime_of_mem_primesBelow hM).symm
  ¬∑ intro p hp
    simp_rw [norm_pow]
    exact summable_geometric_iff_norm_lt_1.mpr <| (norm_norm (f p)).symm ‚ñ∏ h hp

-- We now assume in addition that `f` is norm-summable.
variable (hsum : Summable (‚Äñf ¬∑‚Äñ))

/-- A version of `summable_and_hasSum_smoothNumbers_prod_primesBelow_tsum` in terms of the
value of the series. -/
lemma prod_primesBelow_tsum_eq_tsum_smoothNumbers (N : ‚Ñï) :
    ‚àè p in N.primesBelow, ‚àë' (n : ‚Ñï), f (p ^ n) = ‚àë' m : N.smoothNumbers, f m :=
  (summable_and_hasSum_smoothNumbers_prod_primesBelow_tsum hf‚ÇÅ hmul
    (fun hp ‚Ü¶ hsum.comp_injective <| Nat.pow_right_injective hp.one_lt) _).2.tsum_eq.symm

lemma _root_.Summable.norm_lt_one {f : ‚Ñï ‚Üí* F} (hsum : Summable f) {p : ‚Ñï} (hp : 1 < p) :
    ‚Äñf p‚Äñ < 1 := by
  refine summable_geometric_iff_norm_lt_1.mp ?_
  simp_rw [‚Üê map_pow]
  exact hsum.comp_injective <| Nat.pow_right_injective hp

/-- A version of `summable_and_hasSum_smoothNumbers_prod_primesBelow_geometric` in terms of
the value of the series. -/
lemma prod_primesBelow_geometric_eq_tsum_smoothNumbers {f : ‚Ñï ‚Üí* F} (hsum : Summable f) (N : ‚Ñï) :
    ‚àè p in N.primesBelow, (1 - f p)‚Åª¬π = ‚àë' m : N.smoothNumbers, f m := by
  refine (summable_and_hasSum_smoothNumbers_prod_primesBelow_geometric ?_ N).2.tsum_eq.symm
  exact fun {_} hp ‚Ü¶ hsum.norm_lt_one hp.one_lt

/-- We need the following statement that says that summing over `N`-smooth numbers
for large enough `N` gets us arbitrarily close to the sum over all natural numbers
(assuming `f` is norm-summable and `f 0 = 0`; the latter since `0` is not smooth). -/
lemma norm_tsum_smoothNumbers_sub_tsum_lt (hsum : Summable f) (hf‚ÇÄ : f 0 = 0) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) :
    ‚àÉ N‚ÇÄ : ‚Ñï, ‚àÄ N ‚â• N‚ÇÄ, ‚Äñ(‚àë' m : ‚Ñï, f m) - (‚àë' m : N.smoothNumbers, f m)‚Äñ < Œµ := by
  obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© :=
    summable_iff_nat_tsum_vanishing.mp hsum (Metric.ball 0 Œµ) <| Metric.ball_mem_nhds 0 Œµpos
  simp_rw [mem_ball_zero_iff] at hN‚ÇÄ
  refine ‚ü®N‚ÇÄ, fun N hN‚ÇÅ ‚Ü¶ ?_‚ü©
  convert hN‚ÇÄ _ <| (Nat.smoothNumbers_compl N).trans <| fun m hm ‚Ü¶ hN‚ÇÅ.le.trans hm
  simp_rw [‚Üê tsum_subtype_add_tsum_subtype_compl hsum N.smoothNumbers,
    add_sub_cancel', tsum_eq_tsum_diff_singleton (N.smoothNumbers)·∂ú hf‚ÇÄ]

open Filter Nat in
/-- The *Euler Product* for multiplicative (on coprime arguments) functions.
If `f : ‚Ñï ‚Üí F`, where `F` is a complete normed field, `f 0 = 0`,
`f 1 = 1`, `f` is multiplicative on coprime arguments,
and `‚Äñf ¬∑‚Äñ` is summable, then `‚àè' p : {p : ‚Ñï | p.Prime}, ‚àë' e, f (p ^ e) = ‚àë' n, f n`.
Since there are no infinite products yet in Mathlib, we state it in the form of
convergence of finite partial products. -/
-- TODO: Change to use `‚àè'` once infinite products are in Mathlib
theorem euler_product (hf‚ÇÄ : f 0 = 0) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n, ‚àë' e, f (p ^ e)) atTop (ùìù (‚àë' n, f n)) := by
  rw [Metric.tendsto_nhds]
  intro Œµ Œµpos
  simp only [Finset.mem_range, eventually_atTop, ge_iff_le]
  have hsum' := summable_of_summable_norm hsum
  obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© := norm_tsum_smoothNumbers_sub_tsum_lt hsum' hf‚ÇÄ Œµpos
  use N‚ÇÄ
  convert hN‚ÇÄ using 3 with m
  rw [dist_eq_norm, norm_sub_rev]
  congr 2
  exact prod_primesBelow_tsum_eq_tsum_smoothNumbers hf‚ÇÅ hmul hsum m

open Filter Nat in
/-- The *Euler Product* for completely multiplicative functions.
If `f : ‚Ñï ‚Üí*‚ÇÄ F`, where `F` is a complete normed field
and `‚Äñf ¬∑‚Äñ` is summable, then `‚àè' p : {p : ‚Ñï | p.Prime}, (1 - f p)‚Åª¬π = ‚àë' n, f n`.
Since there are no infinite products yet in Mathlib, we state it in the form of
convergence of finite partial products. -/
-- TODO: Change to use `‚àè'` once infinite products are in Mathlib
theorem euler_product_multiplicative {f : ‚Ñï ‚Üí*‚ÇÄ F} (hsum : Summable fun x => ‚Äñf x‚Äñ) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n, (1 - f p)‚Åª¬π) atTop (ùìù (‚àë' n, f n)) := by
  convert euler_product f.map_one (fun {m n} _ ‚Ü¶ f.map_mul m n) hsum f.map_zero with N p hN
  simp_rw [map_pow]
  refine (tsum_geometric_of_norm_lt_1 <| summable_geometric_iff_norm_lt_1.mp ?_).symm
  refine summable_of_summable_norm ?_
  convert hsum.comp_injective <| Nat.pow_right_injective (prime_of_mem_primesBelow hN).one_lt
  simp only [norm_pow, Function.comp_apply, map_pow]

end EulerProduct

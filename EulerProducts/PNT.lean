import Mathlib.NumberTheory.DirichletCharacter.Orthogonality
import Mathlib.NumberTheory.LSeries.Linearity
import Mathlib.NumberTheory.LSeries.Nonvanishing
import Mathlib.NumberTheory.LSeries.PrimesInAP
import Mathlib.RingTheory.RootsOfUnity.AlgebraicallyClosed

open scoped LSeries.notation

open Complex

/-!
### The L-function of Œõ restricted to a residue class
-/

section arith_prog

namespace ArithmeticFunction

open DirichletCharacter

namespace vonMangoldt

variable {q : ‚Ñï} (a : ZMod q)

/-- The von Mangoldt function restricted to the residue class `a` mod `q`. -/
noncomputable abbrev residue_class : ‚Ñï ‚Üí ‚Ñù :=
  {n : ‚Ñï | (n : ZMod q) = a}.indicator (vonMangoldt ¬∑)

lemma residue_class_apply_zero : residue_class a 0 = 0 := by
  simp only [Set.indicator_apply_eq_zero, Set.mem_setOf_eq, Nat.cast_zero, map_zero, ofReal_zero,
    implies_true]

lemma abscissaOfAbsConv_residue_class_le_one :
    LSeries.abscissaOfAbsConv ‚Üó(vonMangoldt.residue_class a) ‚â§ 1 := by
  refine LSeries.abscissaOfAbsConv_le_of_forall_lt_LSeriesSummable fun y hy ‚Ü¶ ?_
  simp only [vonMangoldt.residue_class]
  have := ArithmeticFunction.LSeriesSummable_vonMangoldt <|
    show 1 < (y : ‚ÑÇ).re by simp only [ofReal_re, hy]
  convert this.indicator {n : ‚Ñï | (n : ZMod q) = a}
  refine summable_congr fun n ‚Ü¶ ?_
  rcases eq_or_ne n 0 with rfl | hn
  ¬∑ simp only [Set.indicator_apply, Set.mem_setOf_eq, LSeries.term_zero, Nat.cast_zero, ite_self]
  ¬∑ simp+contextual only [Set.indicator_apply, Set.mem_setOf_eq, apply_ite, ofReal_zero, ne_eq, hn,
      not_false_eq_true, LSeries.term_of_ne_zero, ‚ÜìreduceIte, zero_div, ite_self]

variable [NeZero q] {a}

lemma residue_class_apply (ha : IsUnit a) (n : ‚Ñï) :
    residue_class a n =
      (q.totient : ‚ÑÇ)‚Åª¬π * ‚àë œá : DirichletCharacter ‚ÑÇ q, œá a‚Åª¬π * œá n * vonMangoldt n := by
  rw [eq_inv_mul_iff_mul_eq‚ÇÄ <| mod_cast (Nat.totient_pos.mpr q.pos_of_neZero).ne']
  simp +contextual only [residue_class, Set.indicator_apply, Set.mem_setOf_eq, apply_ite,
    ofReal_zero, mul_zero, ‚Üê Finset.sum_mul, sum_char_inv_mul_char_eq ‚ÑÇ ha n, eq_comm (a := a),
    ite_mul, zero_mul, ‚ÜìreduceIte, ite_self]

lemma residue_class_eq (ha : IsUnit a) :
    ‚Üó(residue_class a) = (q.totient : ‚ÑÇ)‚Åª¬π ‚Ä¢
      ‚àë œá : DirichletCharacter ‚ÑÇ q, œá a‚Åª¬π ‚Ä¢ (fun n : ‚Ñï ‚Ü¶ œá n * vonMangoldt n) := by
  ext1 n
  simpa only [Pi.smul_apply, Finset.sum_apply, smul_eq_mul, ‚Üê mul_assoc]
    using residue_class_apply ha n

/-- The L-series of the von Mangoldt function restricted to the prime residue class `a` mod `q`
is a linear combination of logarithmic derivatives of L-functions of the Dirichlet characters
mod `q` (on `re s ‚â• 1`). -/
lemma LSeries_residue_class_eq (ha : IsUnit a) {s : ‚ÑÇ} (hs : 1 < s.re) :
    LSeries ‚Üó(residue_class a) s =
      -(q.totient : ‚ÑÇ)‚Åª¬π * ‚àë œá : DirichletCharacter ‚ÑÇ q, œá a‚Åª¬π *
        (deriv (LFunction œá) s / LFunction œá s) := by
  simp only [deriv_LFunction_eq_deriv_LSeries _ hs, LFunction_eq_LSeries _ hs, neg_mul, ‚Üê mul_neg,
    ‚Üê Finset.sum_neg_distrib, ‚Üê neg_div, ‚Üê LSeries_twist_vonMangoldt_eq _ hs]
  rw [eq_inv_mul_iff_mul_eq‚ÇÄ <| mod_cast (Nat.totient_pos.mpr q.pos_of_neZero).ne']
  simp_rw [‚Üê LSeries_smul,
    ‚Üê LSeries_sum <| fun œá _ ‚Ü¶ (LSeriesSummable_twist_vonMangoldt œá hs).smul _]
  refine LSeries_congr s fun {n} _ ‚Ü¶ ?_
  simp only [Pi.smul_apply, residue_class_apply ha, smul_eq_mul, ‚Üê mul_assoc,
    mul_inv_cancel_of_invertible, one_mul, Finset.sum_apply, Pi.mul_apply]

end vonMangoldt

namespace DirichletsThm

variable {q : ‚Ñï} [NeZero q] (a : ZMod q)

open Classical in
/-- The function `F` used in the Wiener-Ikehara Theorem to prove Dirichlet's Theorem. -/
noncomputable
abbrev auxFun (s : ‚ÑÇ) : ‚ÑÇ :=
  (q.totient : ‚ÑÇ)‚Åª¬π * (-deriv (LFunctionTrivChar‚ÇÅ q) s / LFunctionTrivChar‚ÇÅ q s -
    ‚àë œá ‚àà ({1}·∂ú : Finset (DirichletCharacter ‚ÑÇ q)), œá a‚Åª¬π * deriv (LFunction œá) s / LFunction œá s)

lemma continuousOn_auxFun' :
    ContinuousOn (auxFun a) {s | s = 1 ‚à® ‚àÄ œá : DirichletCharacter ‚ÑÇ q, LFunction œá s ‚â† 0} := by
  rw [show auxFun a = fun s ‚Ü¶ _ from rfl]
  simp only [auxFun, sub_eq_add_neg]
  refine continuousOn_const.mul <| ContinuousOn.add ?_ ?_
  ¬∑ refine (continuousOn_neg_logDeriv_LFunctionTrivChar‚ÇÅ q).mono fun s hs ‚Ü¶ ?_
    have := LFunction_ne_zero_of_one_le_re (1 : DirichletCharacter ‚ÑÇ q) (s := s)
    simp only [ne_eq, Set.mem_setOf_eq] at hs
    tauto
  ¬∑ simp only [‚Üê Finset.sum_neg_distrib, mul_div_assoc, ‚Üê mul_neg, ‚Üê neg_div]
    refine continuousOn_finset_sum _ fun œá hœá ‚Ü¶ continuousOn_const.mul ?_
    replace hœá : œá ‚â† 1 := by simpa only [ne_eq, Finset.mem_compl, Finset.mem_singleton] using hœá
    refine (continuousOn_neg_logDeriv_LFunction_of_nontriv hœá).mono fun s hs ‚Ü¶ ?_
    simp only [ne_eq, Set.mem_setOf_eq] at hs
    rcases hs with rfl | hs
    ¬∑ simp only [ne_eq, Set.mem_setOf_eq, one_re, le_refl,
        LFunction_ne_zero_of_one_le_re œá (.inl hœá), not_false_eq_true]
    ¬∑ exact hs œá

/-- The L-series of the von Mangoldt function restricted to the prime residue class `a` mod `q`
is continuous on `re s ‚â• 1` except for a single pole at `s = 1` with residue `(q.totient)‚Åª¬π`.
The statement as given here is equivalent. -/
lemma continuousOn_auxFun : ContinuousOn (auxFun a) {s | 1 ‚â§ s.re} := by
  refine (continuousOn_auxFun' a).mono fun s hs ‚Ü¶ ?_
  rcases eq_or_ne s 1 with rfl | hs‚ÇÅ
  ¬∑ simp only [ne_eq, Set.mem_setOf_eq, true_or]
  ¬∑ simp only [ne_eq, Set.mem_setOf_eq, hs‚ÇÅ, false_or]
    exact fun œá ‚Ü¶ LFunction_ne_zero_of_one_le_re œá (.inr hs‚ÇÅ) <| Set.mem_setOf.mp hs

variable {a}

lemma auxFun_prop (ha : IsUnit a) :
    Set.EqOn (auxFun a)
      (fun s ‚Ü¶ L ‚Üó(vonMangoldt.residue_class a) s - (q.totient : ‚ÑÇ)‚Åª¬π / (s - 1))
      {s | 1 < s.re} := by
  intro s hs
  simp only [Set.mem_setOf_eq] at hs
  simp only [vonMangoldt.LSeries_residue_class_eq ha hs, auxFun]
  rw [neg_div, ‚Üê neg_add', mul_neg, ‚Üê neg_mul,  div_eq_mul_one_div (q.totient : ‚ÑÇ)‚Åª¬π,
    sub_eq_add_neg, ‚Üê neg_mul, ‚Üê mul_add]
  congrm (_ * ?_)
  -- this should be easier, but `IsUnit.inv ha` does not work here
  have ha' : IsUnit a‚Åª¬π := isUnit_of_dvd_one ‚ü®a, (ZMod.inv_mul_of_unit a ha).symm‚ü©
  classical -- for `Fintype.sum_eq_add_sum_compl`
  rw [Fintype.sum_eq_add_sum_compl 1, MulChar.one_apply ha', one_mul, add_right_comm]
  simp only [mul_div_assoc]
  congrm (?_ + _)
  have hs‚ÇÅ : s ‚â† 1 := fun h ‚Ü¶ ((h ‚ñ∏ hs).trans_eq one_re).false
  rw [deriv_LFunctionTrivChar‚ÇÅ_apply_of_ne_one _ hs‚ÇÅ, LFunctionTrivChar‚ÇÅ,
    Function.update_noteq hs‚ÇÅ]
  simp only [LFunctionTrivChar]
  rw [add_div, mul_div_mul_left _ _ (sub_ne_zero_of_ne hs‚ÇÅ)]
  conv_lhs => enter [2, 1]; rw [‚Üê mul_one (LFunction ..)]
  rw [mul_comm _ 1, mul_div_mul_right _ _ <| LFunction_ne_zero_of_one_le_re 1 (.inr hs‚ÇÅ) hs.le]

lemma auxFun_real (ha : IsUnit a) {x : ‚Ñù} (hx : 1 < x) : auxFun a x = (auxFun a x).re := by
  replace hx : (x : ‚ÑÇ) ‚àà {s | 1 < s.re} := by
    simp only [Set.mem_setOf_eq, ofReal_re, hx]
  rw [auxFun_prop ha hx]
  simp only [sub_re, ofReal_sub]
  congr 1
  ¬∑ rw [LSeries, re_tsum ?_]
    ¬∑ push_cast
      refine tsum_congr fun n ‚Ü¶ ?_
      rcases eq_or_ne n 0 with rfl | hn
      ¬∑ simp only [LSeries.term_zero, zero_re, ofReal_zero]
      ¬∑ simp only [ne_eq, hn, not_false_eq_true, LSeries.term_of_ne_zero, ‚Üê ofReal_natCast n, ‚Üê
          ofReal_cpow n.cast_nonneg]
        norm_cast
    ¬∑ refine LSeriesSummable_of_abscissaOfAbsConv_lt_re ?_
      refine (vonMangoldt.abscissaOfAbsConv_residue_class_le_one a).trans_lt ?_
      simp only [Set.mem_setOf_eq, ofReal_re] at hx ‚ä¢
      norm_cast
  ¬∑ rw [show (q.totient : ‚ÑÇ) = (q.totient : ‚Ñù) from rfl]
    norm_cast

end DirichletsThm

/-!
### Derivation of Dirichlet's Theorem (without Wiener-Ikehara)
-/

variable {q : ‚Ñï} {a : ZMod q}

open DirichletsThm

open Topology Filter in
lemma LSeries_vonMangoldt_residue_class_tendsto_atTop [NeZero q] (ha : IsUnit a) :
    Tendsto (fun x : ‚Ñù ‚Ü¶ ‚àë' n, vonMangoldt.residue_class a n / (n : ‚Ñù) ^ x)
      (ùìù[>] 1) atTop := by
  have H {x : ‚Ñù} (hx : 1 < x) :
      ‚àë' n, vonMangoldt.residue_class a n / (n : ‚Ñù) ^ x =
        (auxFun a x).re + (q.totient : ‚Ñù)‚Åª¬π / (x - 1) := by
    apply_fun ((‚Üë) : ‚Ñù ‚Üí ‚ÑÇ) using ofReal_injective
    push_cast
    simp_rw [ofReal_cpow (Nat.cast_nonneg _), ofReal_natCast]
    convert_to L ‚Üó(vonMangoldt.residue_class a) x = _
    ¬∑ simp only [div_eq_mul_inv, LSeries, LSeries.term]
      refine tsum_congr fun n ‚Ü¶ ?_
      rcases eq_or_ne n 0 with rfl | hn
      ¬∑ simp only [vonMangoldt.residue_class_apply_zero, ofReal_zero, Nat.cast_zero, zero_mul,
          ‚ÜìreduceIte]
      ¬∑ simp only [hn, ‚ÜìreduceIte]
    ¬∑ rw [‚Üê auxFun_real ha hx, auxFun_prop ha <| Set.mem_setOf.mpr (ofReal_re x ‚ñ∏ hx)]
      simp only [sub_add_cancel]
  refine Tendsto.congr' (eventuallyEq_nhdsWithin_of_eqOn fun ‚¶Éx‚¶Ñ hx ‚Ü¶ H hx).symm ?_
  clear H
  have : ContinuousWithinAt (fun x : ‚Ñù ‚Ü¶ (auxFun a x).re) {x | 1 < x} 1 := by
    refine continuous_re.continuousWithinAt.comp (t := (Set.univ : Set ‚ÑÇ)) ?_ fun ‚¶É_‚¶Ñ _ ‚Ü¶ trivial
    change ContinuousWithinAt ((auxFun a) ‚àò ofReal) ..
    refine ContinuousWithinAt.comp (t := {s | 1 < s.re}) ?_ continuous_ofReal.continuousWithinAt
      fun ‚¶É_‚¶Ñ a ‚Ü¶ a
    refine ContinuousWithinAt.mono (t := {s | 1 ‚â§ s.re}) ?_
       fun s hs ‚Ü¶ Set.mem_setOf.mpr <| (Set.mem_setOf.mp hs).le
    exact ContinuousOn.continuousWithinAt (continuousOn_auxFun a) <| by
      simp only [ofReal_one, Set.mem_setOf_eq, one_re, le_refl]
  refine tendsto_atTop_add_left_of_le' (ùìù[>] 1) ((auxFun a 1).re - 1) ?_ ?_
  ¬∑ exact Tendsto.eventually_const_le (ofReal_one ‚ñ∏ sub_one_lt _) this.tendsto
  ¬∑ conv => enter [1, x]; rw [div_eq_mul_inv]
    refine Tendsto.comp (y := atTop) ?_ ?_
    ¬∑ refine tendsto_atTop_atTop.mpr fun x ‚Ü¶ ‚ü®q.totient * x, fun y hy ‚Ü¶ ?_‚ü©
      exact (le_inv_mul_iff‚ÇÄ' <| mod_cast q.totient.pos_of_neZero).mpr hy
    ¬∑ refine tendsto_inv_zero_atTop.comp (y := ùìù[>] 0) ?_
      convert ContinuousWithinAt.tendsto_nhdsWithin_image ?_
      ¬∑ exact (sub_self _).symm
      ¬∑ simp only [Set.image_sub_const_Ioi, sub_self]
      ¬∑ exact (continuous_add_right (-1)).continuousWithinAt


private lemma inv_lt_one (p : Nat.Primes) : (p : ‚Ñù)‚Åª¬π < 1 := by
  rw [inv_lt_one‚ÇÄ <| mod_cast p.prop.pos]
  exact_mod_cast p.prop.one_lt

private lemma log_div_bound (p : Nat.Primes) :
    Real.log p * (p : ‚Ñù) ^ (-2 : ‚Ñ§) / (1 - (p : ‚Ñù)‚Åª¬π) ‚â§ 4 * (p : ‚Ñù) ^ (-2 + 1 / 2 : ‚Ñù) := by
  have hp‚ÇÅ : 0 < (p : ‚Ñù) := mod_cast p.prop.pos
  have key : Real.log p / (1 - (p : ‚Ñù)‚Åª¬π) ‚â§ 4 * (p : ‚Ñù) ^ (1 / 2 : ‚Ñù) := by
    have : 0 < 1 - (p : ‚Ñù)‚Åª¬π := sub_pos.mpr <| inv_lt_one p
    rw [div_le_iff‚ÇÄ this]
    have : 1 ‚â§ 2 * (1 - (p : ‚Ñù)‚Åª¬π) := by
      have : (p : ‚Ñù)‚Åª¬π ‚â§ 2‚Åª¬π :=
        (inv_le_inv‚ÇÄ (mod_cast p.prop.pos) zero_lt_two).mpr <| mod_cast p.prop.two_le
      linarith
    calc Real.log p
      _ ‚â§ (p : ‚Ñù) ^ (1 / 2 : ‚Ñù) / (1 / 2) := Real.log_le_rpow_div p.val.cast_nonneg one_half_pos
      _ = 2 * (p : ‚Ñù) ^ (1 / 2 : ‚Ñù) := by field_simp; ring
      _ ‚â§ 2 * (p : ‚Ñù) ^ (1 / 2 : ‚Ñù) * (2 * (1 - (p : ‚Ñù)‚Åª¬π)) := by
        nth_rw 1 [‚Üê mul_one (2 * _ ^ _)]
        gcongr
      _ = 4 * (p : ‚Ñù) ^ (1 / 2 : ‚Ñù) * (1 - (p : ‚Ñù)‚Åª¬π) := by ring
  rw [mul_div_right_comm, add_comm, Real.rpow_add hp‚ÇÅ, ‚Üê mul_assoc,
    show (-2 : ‚Ñù) = (-2 : ‚Ñ§) by norm_cast, Real.rpow_intCast]
  gcongr

private lemma tsum_primes_le : ‚àÉ C : ‚Ñù, ‚àë' p : Nat.Primes, (p : ‚Ñù) ^ (-2 + 1 / 2 : ‚Ñù) ‚â§ C := by
  norm_num
  use ‚àë' n : ‚Ñï, (n : ‚Ñù) ^ (-(3 / 2 : ‚Ñù))
  convert tsum_subtype_le (Œ≥ := ‚Ñù) _ {p : ‚Ñï | p.Prime} (fun n ‚Ü¶ ?_) ?_ using 3 with e p
  ¬∑ rfl
  ¬∑ positivity
  ¬∑ exact Real.summable_nat_rpow.mpr <| by norm_num

variable (a)

lemma summable_residue_class_real_mul_pow {x : ‚Ñù} (hx : x > 1) :
    Summable fun n : ‚Ñï ‚Ü¶ (vonMangoldt.residue_class a n) / (n : ‚Ñù) ^ x :=
  LSeries.summable_real_of_abscissaOfAbsConv_lt <|
    (vonMangoldt.abscissaOfAbsConv_residue_class_le_one a).trans_lt <| mod_cast hx.lt

lemma vonMangoldt_non_primes_residue_class_bound :
    ‚àÉ C : ‚Ñù, ‚àÄ {x : ‚Ñù} (_ : x > 1), ‚àë' n : ‚Ñï,
      (if n.Prime then (0 : ‚Ñù) else vonMangoldt.residue_class a n) / (n : ‚Ñù) ^ x ‚â§ C := by
  obtain ‚ü®C, hC‚ü© := tsum_primes_le
  use 4 * C
  intro x hx
  have hpx (p : Nat.Primes) : (p : ‚Ñù) ^ (-x) < 1 := by
    rw [Real.rpow_neg (by positivity), inv_lt_one‚ÇÄ (by have := p.prop.pos; positivity)]
    refine Real.one_lt_rpow (mod_cast p.prop.one_lt) (zero_lt_one.trans hx.lt)
  let F (n : ‚Ñï) : ‚Ñù :=
    (if n.Prime then (0 : ‚Ñù) else vonMangoldt.residue_class a n) / (n : ‚Ñù) ^ x
  have hF‚ÇÄ (p : Nat.Primes) : F p = 0 := by
    simp only [p.prop, ‚ÜìreduceIte, zero_div, F]
  have hF‚ÇÅ (p : Nat.Primes) (k : ‚Ñï) : F ((p : ‚Ñï) ^ (k + 2)) =
      if ((p : ‚Ñï) ^ (k + 2) : ZMod q) = a then Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) else 0 := by
    simp only [vonMangoldt.residue_class, Set.indicator, Set.mem_setOf_eq, div_eq_mul_inv, ite_mul,
      zero_mul, le_add_iff_nonneg_left, zero_le, Nat.Prime.not_prime_pow, ‚ÜìreduceIte, Nat.cast_pow,
      F]
    refine ite_congr rfl (fun _ ‚Ü¶ ?_) fun _ ‚Ü¶ rfl
    rw [vonMangoldt_apply_pow (by omega), vonMangoldt_apply_prime p.prop,
      ‚Üê Real.rpow_natCast_mul (by positivity), ‚Üê Real.rpow_mul_natCast (by positivity), neg_mul,
      mul_comm x, Real.rpow_neg p.val.cast_nonneg]
  have hs : Summable F := by
    have := summable_residue_class_real_mul_pow a hx
    have H‚ÇÅ (n : ‚Ñï) : 0 ‚â§ {n : ‚Ñï | (n : ZMod q) = a}.indicator (fun n ‚Ü¶ Œõ n) n / (n : ‚Ñù) ^ x := by
      simp only [Set.indicator, Set.mem_setOf_eq]
      split_ifs with h
      ¬∑ have : 0 ‚â§ vonMangoldt n := vonMangoldt_nonneg
        positivity
      ¬∑ rw [zero_div]
    have hFnonneg (n : ‚Ñï) : 0 ‚â§ F n := by
      simp only [vonMangoldt.residue_class, ite_mul, zero_mul, F]
      split_ifs with hn
      ¬∑ rw [zero_div]
      ¬∑ exact H‚ÇÅ n
    refine this.of_nonneg_of_le hFnonneg fun n ‚Ü¶ ?_
    simp only [vonMangoldt.residue_class, ite_div, zero_div, F]
    refine (ite_le_sup ..).trans ?_
    simp only [H‚ÇÅ, sup_of_le_right, le_refl]
  have hF : Function.support F ‚äÜ {n | IsPrimePow n} := by
    intro n hn
    simp only [Function.mem_support] at hn
    contrapose! hn
    simp only [Set.mem_setOf_eq] at hn
    simp only [mt Nat.Prime.isPrimePow hn, ‚ÜìreduceIte, div_eq_zero_iff, Set.indicator_apply_eq_zero,
      Set.mem_setOf_eq, vonMangoldt_apply, hn, implies_true, Nat.cast_nonneg, true_or, F]
  rw [tsum_eq_tsum_primes_add_tsum_primes_of_support_subset_prime_powers hs hF]
  conv_lhs => enter [1, 1, p]; rw [hF‚ÇÄ p]
  simp only [tsum_zero, zero_add]
  conv_lhs => enter [1, p, 1, k]; rw [hF‚ÇÅ p k]
  have : ‚àë' (p : Nat.Primes), 4 * (p : ‚Ñù) ^ (-2 + 1 / 2 : ‚Ñù) ‚â§ 4 * C := by
    rw [tsum_mul_left]
    gcongr
  have hs‚ÇÑ (p : Nat.Primes) : Summable fun k : ‚Ñï ‚Ü¶ Real.log p * (p : ‚Ñù)‚Åª¬π ^ (k + 2) := by
    have H (k : ‚Ñï) : Real.log p * (p : ‚Ñù)‚Åª¬π ^ (k + 2) ‚â§ (p : ‚Ñù)‚Åª¬π ^ (k + 1) := by
      have h‚ÇÅ := Real.log_le_rpow_div p.val.cast_nonneg zero_lt_one
      simp only [Real.rpow_one, div_one] at h‚ÇÅ
      calc _
        _ ‚â§ p * (p : ‚Ñù)‚Åª¬π ^ (k + 2) := by gcongr
        _ = (p : ‚Ñù)‚Åª¬π ^ (k + 1) := by
          nth_rewrite 1 [‚Üê inv_inv (p : ‚Ñù)]
          rw [mul_comm, ‚Üê div_eq_mul_inv, div_eq_iff (by have := p.prop.pos; positivity),
            ‚Üê pow_succ]
    refine Summable.of_nonneg_of_le (fun k ‚Ü¶ by positivity) H ?_
    conv => enter [1, k]; rw [pow_succ']
    exact Summable.mul_left _ <| summable_geometric_of_lt_one (by positivity) <| inv_lt_one p
  have hs‚ÇÄ (p : Nat.Primes) : Summable fun k ‚Ü¶ Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) := by
    refine (hs‚ÇÑ p).of_nonneg_of_le (fun k ‚Ü¶ by positivity) fun k ‚Ü¶ ?_
    rw [‚Üê Real.rpow_neg_one]
    gcongr
    exact_mod_cast p.prop.one_le
  have hs‚ÇÅ : Summable fun p : Nat.Primes ‚Ü¶ ‚àë' (k : ‚Ñï),
      if ((p : ‚Ñï) ^ (k + 2) : ZMod q) = a then Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) else 0 := by
    have H (p : Nat.Primes) : ‚àë' (k : ‚Ñï),
        (if ((p : ‚Ñï) ^ (k + 2) : ZMod q) = a then Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) else 0) ‚â§
        ‚àë' k : ‚Ñï, Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) := by
      have H‚ÇÄ (k : ‚Ñï) : (if ((p : ‚Ñï) ^ (k + 2) : ZMod q) = a then
          Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) else 0) ‚â§ Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) := by
        refine (ite_le_sup ..).trans ?_
        simp only [sup_le_iff, le_refl, true_and]
        positivity
      refine tsum_le_tsum H‚ÇÄ ?_ (hs‚ÇÄ p)
      ¬∑ refine Summable.of_nonneg_of_le (fun k ‚Ü¶ ?_) H‚ÇÄ (hs‚ÇÄ p)
        refine le_trans ?_ (inf_le_ite ..)
        positivity
    refine Summable.of_nonneg_of_le (fun p ‚Ü¶ tsum_nonneg fun n ‚Ü¶ ?_) H ?_
    ¬∑ exact le_trans (by positivity) <| inf_le_ite ..
    ¬∑ simp_rw [add_comm _ 2, pow_add, ‚Üê mul_assoc, tsum_mul_left]
      conv => enter [1, p, 2]; rw [tsum_geometric_of_lt_one (by positivity) (hpx p)]
      have H‚ÇÅ (p : Nat.Primes) :
          Real.log p * ((p : ‚Ñù) ^ (-x)) ^ 2 * (1 - (p : ‚Ñù) ^ (-x))‚Åª¬π ‚â§
            2 * Real.log p * ((p : ‚Ñù) ^ (-x)) ^ 2 := by
        have h‚ÇÄ : 0 < 1 - (p : ‚Ñù) ^ (-x) := sub_pos.mpr (hpx p)
        have h‚ÇÅ : (1 - (p : ‚Ñù) ^ (-x))‚Åª¬π ‚â§ 2 := by
          rw [inv_le_comm‚ÇÄ h‚ÇÄ zero_lt_two, le_sub_comm, Real.rpow_neg (mod_cast p.val.cast_nonneg),
            show (1 - 2‚Åª¬π : ‚Ñù) = 2‚Åª¬π by norm_num,
            inv_le_inv‚ÇÄ (by have := p.prop.pos; positivity) zero_lt_two, ‚Üê Real.rpow_one 2]
          exact Real.rpow_le_rpow zero_le_two (mod_cast p.prop.two_le : (2 : ‚Ñù) ‚â§ p) zero_le_one
            |>.trans <| Real.rpow_le_rpow_of_exponent_le (mod_cast p.prop.one_le) hx.lt.le
        rw [‚Üê mul_rotate]
        gcongr
      refine Summable.of_nonneg_of_le (fun p ‚Ü¶ ?_) H‚ÇÅ ?_
      ¬∑ have : 0 < 1 - (p : ‚Ñù) ^ (-x) := sub_pos.mpr (hpx p)
        positivity
      ¬∑ simp_rw [mul_assoc]
        refine Summable.mul_left 2 ?_
        have key (p : Nat.Primes) :
            Real.log p * ((p : ‚Ñù) ^ (-x)) ^ 2 ‚â§ 2 * (p : ‚Ñù) ^ (-(3 / 2) : ‚Ñù) := by
          have h‚ÇÅ := Real.log_le_rpow_div p.val.cast_nonneg one_half_pos
          have h‚ÇÇ : ((p : ‚Ñù) ^ (-x)) ^ 2 ‚â§ (p : ‚Ñù) ^ (-2 : ‚Ñù) := by
            rw [Real.rpow_neg p.val.cast_nonneg 2, ‚Üê Real.inv_rpow p.val.cast_nonneg,
              ‚Üê Real.rpow_natCast]
            refine Real.rpow_le_rpow (by positivity) ?_ zero_le_two
            rw [‚Üê Real.rpow_neg_one]
            exact (Real.rpow_le_rpow_left_iff <| mod_cast p.prop.one_lt).mpr <| neg_le_neg hx.lt.le
          calc _
            _ ‚â§ Real.log p * (p : ‚Ñù) ^ (-2 : ‚Ñù) := by gcongr
            _ ‚â§ (p : ‚Ñù) ^ (1 / 2 : ‚Ñù) / (1 / 2) * (p : ‚Ñù) ^ (-2 : ‚Ñù) := by gcongr
            _ = _ := by
              rw [one_div, div_inv_eq_mul, mul_comm _ 2, mul_assoc, ‚Üê Real.rpow_add (mod_cast p.prop.pos)]
              norm_num
        refine Summable.of_nonneg_of_le (fun _ ‚Ü¶ by positivity) key ?_
        exact (Nat.Primes.summable_rpow.mpr <| by norm_num).mul_left 2
  have hs‚ÇÇ : Summable fun p : Nat.Primes ‚Ü¶ 4 * (p : ‚Ñù) ^ (-2 + 1 / 2 : ‚Ñù) :=
    (Nat.Primes.summable_rpow.mpr <| by norm_num).mul_left _
  refine le_trans ?_ this
  refine tsum_le_tsum (fun p ‚Ü¶ ?_) hs‚ÇÅ hs‚ÇÇ
  have H (k : ‚Ñï) :
      (if ((p : ‚Ñï) ^ (k + 2) : ZMod q) = a then Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) else 0) ‚â§
      Real.log p * (p : ‚Ñù)‚Åª¬π ^ (k + 2) := by
    refine (ite_le_sup ..).trans ?_
    rw [sup_eq_left.mpr <| by positivity, ‚Üê Real.rpow_neg_one]
    gcongr
    exact_mod_cast p.prop.one_le
  have hs‚ÇÉ : Summable fun k : ‚Ñï ‚Ü¶
      if ((p : ‚Ñï) ^ (k + 2) : ZMod q) = a then Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) else 0 := by
    have H (k : ‚Ñï) :
        (if ((p : ‚Ñï) ^ (k + 2) : ZMod q) = a then Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) else 0) ‚â§
          Real.log p * ((p : ‚Ñù) ^ (-x)) ^ (k + 2) := by
      refine (ite_le_sup ..).trans ?_
      rw [sup_eq_left.mpr <| by positivity]
    refine Summable.of_nonneg_of_le (fun k ‚Ü¶ ?_) H (hs‚ÇÄ p)
    exact le_trans (by positivity) (inf_le_ite ..)
  refine (tsum_le_tsum H hs‚ÇÉ <| hs‚ÇÑ p).trans ?_
  conv_lhs => enter [1, k]; rw [add_comm, pow_add]
  rw [tsum_mul_left, tsum_mul_left, ‚Üê mul_assoc, tsum_geometric_of_lt_one (by positivity) (inv_lt_one p),
    ‚Üê div_eq_mul_inv, ‚Üê zpow_natCast, inv_zpow']
  exact log_div_bound p

lemma vonMangoldt_residue_class_bound :
    ‚àÉ C : ‚Ñù, ‚àÄ {x : ‚Ñù} (_ : x > 1), ‚àë' n : ‚Ñï, vonMangoldt.residue_class a n / (n : ‚Ñù) ^ x ‚â§
      (‚àë' p : Nat.Primes, vonMangoldt.residue_class a p / (p : ‚Ñù) ^ x) + C := by
  obtain ‚ü®C, hC‚ü© := vonMangoldt_non_primes_residue_class_bound a
  use C
  intro x hx
  have hs‚ÇÅ : Summable fun n : ‚Ñï ‚Ü¶ vonMangoldt.residue_class a n / (n : ‚Ñù) ^ x :=
    summable_residue_class_real_mul_pow a hx
  have hf‚ÇÅ : Function.support (fun n ‚Ü¶ vonMangoldt.residue_class a n / (n : ‚Ñù) ^ x) ‚äÜ
      {n | IsPrimePow n} := by
    simp only [Function.support_div, Set.support_indicator]
    refine Set.inter_subset_left.trans <| Set.inter_subset_right.trans ?_
    simp only [Function.support_subset_iff, ne_eq, vonMangoldt_ne_zero_iff, Set.mem_setOf_eq,
      imp_self, implies_true]
  rw [tsum_eq_tsum_primes_add_tsum_primes_of_support_subset_prime_powers hs‚ÇÅ hf‚ÇÅ]
  gcongr
  convert hC hx
  have hs‚ÇÇ : Summable fun n : ‚Ñï ‚Ü¶
      (if Nat.Prime n then 0 else vonMangoldt.residue_class a n) / ‚Üën ^ x := by
    convert_to Summable <|
      {n : ‚Ñï | ¬¨ n.Prime}.indicator (fun n ‚Ü¶ vonMangoldt.residue_class a n / ‚Üën ^ x)
    ¬∑ ext1 n
      simp only [Set.indicator, Set.mem_setOf_eq, ite_div, zero_div, ite_not]
    ¬∑ exact Summable.indicator hs‚ÇÅ _
  have hf‚ÇÇ : Function.support
      (fun n : ‚Ñï ‚Ü¶ (if Nat.Prime n then 0 else vonMangoldt.residue_class a n) / ‚Üën ^ x) ‚äÜ
        {n | IsPrimePow n} := by
    rw [Function.support_div]
    refine Set.inter_subset_left.trans ?_
    simp only [Function.support_subset_iff, ne_eq, ite_eq_left_iff, Set.indicator_apply_eq_zero,
      Set.mem_setOf_eq, Classical.not_imp, vonMangoldt_ne_zero_iff, and_imp, imp_self, implies_true]
  rw [tsum_eq_tsum_primes_add_tsum_primes_of_support_subset_prime_powers hs‚ÇÇ hf‚ÇÇ]
  conv_lhs => rw [‚Üê zero_add (tsum _)]
  have hs‚ÇÉ : Summable fun p : Nat.Primes ‚Ü¶
      (if Nat.Prime ‚Üëp then 0 else vonMangoldt.residue_class a ‚Üëp) / ‚Üë‚Üëp ^ x :=
    hs‚ÇÇ.subtype _
  congr
  ¬∑ conv_rhs => enter [1, p]; simp [p.prop]
    exact tsum_zero.symm
  ¬∑ ext1 p
    refine tsum_congr fun k ‚Ü¶ ?_
    have : ¬¨ Nat.Prime ((p : ‚Ñï) ^ (k + 2)) := Nat.Prime.not_prime_pow <| Nat.le_add_left 2 k
    simp only [Nat.cast_pow, this, ‚ÜìreduceIte]

end ArithmeticFunction

end arith_prog

section DirichletsTheorem

open ArithmeticFunction DirichletsThm in
/-- **Dirichlet's Theorem** on primes in arithmetic progression: if `q` is a positive
integer and `a : ZMod q` is a unit, then there are infintely many prime numbers `p`
such that `(p : ZMod q) = a`. -/
theorem dirchlet_primes_in_arith_progression {q : ‚Ñï} [NeZero q] {a : ZMod q} (ha : IsUnit a) :
    ‚àÄ n : ‚Ñï, ‚àÉ p > n, p.Prime ‚àß (p : ZMod q) = a := by
  by_contra! H
  obtain ‚ü®N, hN‚ü© := H
  have hsupp (p : Nat.Primes) (hp : p > N) : vonMangoldt.residue_class a p = 0 := by
    simp only [vonMangoldt.residue_class, Set.mem_setOf_eq, hN p.val hp p.prop,
      not_false_eq_true, Set.indicator_of_not_mem]
  replace hsupp :
      (Function.support (fun p : Nat.Primes ‚Ü¶ vonMangoldt.residue_class a p)).Finite := by
    refine Set.Finite.subset (s := {p : Nat.Primes | p ‚â§ N}) ?_ fun p h ‚Ü¶ ?_
    ¬∑ refine Set.Finite.of_finite_image (f := Subtype.val) ?_ ?_
      ¬∑ exact (Set.finite_le_nat N).subset (s := {n : ‚Ñï | n ‚â§ N}) <|
          Set.image_subset_iff.mpr fun ‚¶É_‚¶Ñ a ‚Ü¶ a
      ¬∑ exact Function.Injective.injOn Nat.Primes.coe_nat_injective
    ¬∑ simp only [Function.mem_support] at h
      simp only [Set.mem_setOf_eq]
      contrapose! h
      exact hsupp p h
  have hsupp' (x : ‚Ñù) :
      (Function.support
        (fun p : Nat.Primes ‚Ü¶ vonMangoldt.residue_class a p / (p : ‚Ñù) ^ x)).Finite := by
    rw [Function.support_div]
    exact Set.Finite.inter_of_left hsupp _
  obtain ‚ü®C, hC‚ü© : ‚àÉ C : ‚Ñù, ‚àÄ {x : ‚Ñù} (_ : x > 1),
      (‚àë' p : Nat.Primes, vonMangoldt.residue_class a p / (p : ‚Ñù) ^ x) ‚â§ C := by
    use ‚àë' p : Nat.Primes, vonMangoldt.residue_class a p
    intro x hx
    refine tsum_le_tsum (fun p ‚Ü¶ ?_) (summable_of_finite_support <| hsupp' x) <|
      summable_of_finite_support hsupp
    conv_rhs => rw [‚Üê div_one (vonMangoldt.residue_class ..)]
    gcongr
    ¬∑ simp only [vonMangoldt.residue_class, Set.indicator, Set.mem_setOf_eq]
      have := vonMangoldt_nonneg (n := p)
      positivity
    ¬∑ rw [‚Üê Real.rpow_zero p]
      gcongr
      ¬∑ exact_mod_cast p.prop.one_le
      ¬∑ exact zero_le_one.trans hx.lt.le
  obtain ‚ü®C', hC'‚ü© := vonMangoldt_residue_class_bound a
  have key : ‚àÄ {x : ‚Ñù} (_ : x > 1),
      ‚àë' n : ‚Ñï, vonMangoldt.residue_class a n / ‚Üën ^ x ‚â§ C + C' :=
    fun {x} hx ‚Ü¶ (hC' hx).trans <| add_le_add_right (hC hx) C'
  have := LSeries_vonMangoldt_residue_class_tendsto_atTop ha
  rw [Filter.tendsto_atTop] at this
  specialize this (C + C' + 1)
  have H : ‚àÄ·∂† (x : ‚Ñù) in nhdsWithin 1 (Set.Ioi 1),
      ‚àë' (n : ‚Ñï), vonMangoldt.residue_class a n / ‚Üën ^ x ‚â§ C + C' := by
    exact eventually_nhdsWithin_of_forall fun _ ‚Ü¶ key
  have := this.and H
  rw [Filter.eventually_iff] at this
  have h (x : ‚Ñù) : ¬¨ (C + C' + 1 ‚â§ ‚àë' (n : ‚Ñï), vonMangoldt.residue_class a n / ‚Üën ^ x ‚àß
      ‚àë' (n : ‚Ñï), vonMangoldt.residue_class a n / ‚Üën ^ x ‚â§ C + C') := by
    intro h'
    have := h'.1.trans h'.2
    simp only [add_le_iff_nonpos_right] at this
    exact zero_lt_one.not_le this
  simp only [h, Set.setOf_false, Filter.empty_not_mem] at this

end DirichletsTheorem

/-!
### Statement of a version of the Wiener-Ikehara Theorem
-/

open Filter Topology Nat ArithmeticFunction in
/-- A version of the *Wiener-Ikehara Tauberian Theorem*: If `f` is a nonnegative arithmetic
function whose L-series has a simple pole at `s = 1` with residue `A` and otherwise extends
continuously to the closed half-plane `re s ‚â• 1`, then `‚àë n < N, f n` is asymptotic to `A*N`. -/
def WienerIkeharaTheorem : Prop :=
  ‚àÄ {f : ‚Ñï ‚Üí ‚Ñù} {A : ‚Ñù} {F : ‚ÑÇ ‚Üí ‚ÑÇ}, (‚àÄ n, 0 ‚â§ f n) ‚Üí
    Set.EqOn F (fun s ‚Ü¶ L ‚Üóf s - A / (s - 1)) {s | 1 < s.re} ‚Üí
    ContinuousOn F {s | 1 ‚â§ s.re} ‚Üí
    Tendsto (fun N : ‚Ñï ‚Ü¶ ((Finset.range N).sum f) / N) atTop (ùìù A)

/-!
### Derivation of the Prime Number Theorem and Dirichlet's Theorem from the Wiener-Ikehara Theorem
-/

open Filter ArithmeticFunction Topology ArithmeticFunction.DirichletsThm

/--  The *Wiener-Ikehara Theorem* implies *Dirichlet's Theorem* in the form that
`œà x ‚àº q.totient‚Åª¬π * x`, where `œà x = ‚àë n < x ‚àß n ‚â° a mod q, Œõ n`
and `Œõ` is the von Mangoldt function.

This is Theorem 2 in Section 2 of PNT+ (but using the `WIT` stub defined here). -/
theorem Dirichlet_vonMangoldt (WIT : WienerIkeharaTheorem) {q : ‚Ñï} [NeZero q] {a : ZMod q}
    (ha : IsUnit a) :
    Tendsto (fun N : ‚Ñï ‚Ü¶ (((Finset.range N).filter (fun n : ‚Ñï ‚Ü¶ (n : ZMod q) = a)).sum Œõ) / N)
      atTop (ùìù <| (q.totient : ‚Ñù)‚Åª¬π) := by
  classical
  have H N : ((Finset.range N).filter (fun n : ‚Ñï ‚Ü¶ (n : ZMod q) = a)).sum Œõ =
      (Finset.range N).sum ({n : ‚Ñï | (n : ZMod q) = a}.indicator Œõ) :=
    (Finset.sum_indicator_eq_sum_filter _ _ (fun _ ‚Ü¶ {n : ‚Ñï | n = a}) _).symm
  simp only [H]
  refine WIT (F := auxFun a) (fun n ‚Ü¶ ?_) ?_ ?_
  ¬∑ exact Set.indicator_apply_nonneg fun _ ‚Ü¶ vonMangoldt_nonneg
  ¬∑ convert auxFun_prop ha with s
    push_cast
    rfl
  ¬∑ exact continuousOn_auxFun a

/-- The *Wiener-Ikehara Theorem* implies the *Prime Number Theorem* in the form that
`œà x ‚àº x`, where `œà x = ‚àë n < x, Œõ n` and `Œõ` is the von Mangoldt function. -/
theorem PNT_vonMangoldt (WIT : WienerIkeharaTheorem) :
    Tendsto (fun N : ‚Ñï ‚Ü¶ ((Finset.range N).sum Œõ) / N) atTop (ùìù 1) := by
  convert Dirichlet_vonMangoldt WIT (q := 1) (a := 1) isUnit_one with n
  ¬∑ exact (Finset.filter_true_of_mem fun _ _ ‚Ü¶ Subsingleton.eq_one _).symm
  ¬∑ simp only [Nat.totient_one, Nat.cast_one, inv_one]

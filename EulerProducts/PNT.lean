import EulerProducts.Auxiliary
import EulerProducts.Logarithm
import Mathlib.Analysis.SpecialFunctions.Complex.LogBounds
import Mathlib.NumberTheory.EulerProduct.DirichletLSeries
import Mathlib.NumberTheory.LSeries.Dirichlet
-- import Mathlib.Tactic.RewriteSearch

/-!
### Statement of a version of the Wiener-Ikehara Theorem
-/

open scoped LSeries.notation

open Filter Topology Nat ArithmeticFunction in
/-- A version of the *Wiener-Ikehara Tauberian Theorem*: If `f` is a nonnegative arithmetic
function whose L-series has a simple pole at `s = 1` with residue `A` and otherwise extends
continuously to the closed half-plane `re s ‚â• 1`, then `‚àë n < N, f n` is asymptotic to `A*N`. -/
def WienerIkeharaTheorem : Prop :=
  ‚àÄ {f : ‚Ñï ‚Üí ‚Ñù} {A : ‚Ñù} {F : ‚ÑÇ ‚Üí ‚ÑÇ}, (‚àÄ n, 0 ‚â§ f n) ‚Üí
    Set.EqOn F (fun s ‚Ü¶ L ‚Üóf s - A / (s - 1)) {s | 1 < s.re} ‚Üí
    ContinuousOn F {s | 1 ‚â§ s.re} ‚Üí
    Tendsto (fun N : ‚Ñï ‚Ü¶ ((Finset.range N).sum f) / N) atTop (ùìù A)

/-!
### The Riemann Zeta Function does not vanish on Re(s) = 1
-/

open Complex

/-- We use `Œ∂` to denote the Rieman zeta function. -/
local notation (name := rzeta) "Œ∂" => riemannZeta

/-- We use `œá‚ÇÅ` to denote the (trivial) Dirichlet character modulo `1`. -/
local notation (name := Dchar_one') "œá‚ÇÅ" => (1 : DirichletCharacter ‚ÑÇ 1)

section EulerProduct

-- This gets moved to `NumberTheory.LSeries.EulerProduct`

open LSeries Nat EulerProduct

/-- A variant of the Euler product for Dirichlet L-series. -/
theorem DirichletCharacter.LSeries_eulerProduct' {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) {s : ‚ÑÇ}
    (hs : 1 < s.re) :
    exp (‚àë' p : Nat.Primes, -log (1 - œá p * p ^ (-s))) = L ‚Üóœá s := by
  rw [LSeries]
  convert exp_sum_primes_log_eq_tsum (f := dirichletSummandHom œá <| ne_zero_of_one_lt_re hs) <|
    summable_dirichletSummand œá hs -- where does the `x‚úù: ‚Ñï` come from??
  ext n
  rcases eq_or_ne n 0 with rfl | hn
  ¬∑ simp only [term_zero, map_zero]
  ¬∑ simp [hn, dirichletSummandHom, div_eq_mul_inv, cpow_neg]

open DirichletCharacter

/-- A variant of the Euler product for the L-series of `Œ∂`. -/
theorem ArithmeticFunction.LSeries_zeta_eulerProduct' {s : ‚ÑÇ} (hs : 1 < s.re) :
    exp (‚àë' p : Nat.Primes, -Complex.log (1 - p ^ (-s))) = L 1 s := by
  convert modOne_eq_one (R := ‚ÑÇ) ‚ñ∏ LSeries_eulerProduct' œá‚ÇÅ hs using 7
  rw [MulChar.one_apply <| isUnit_of_subsingleton _, one_mul]

/-- A variant of the Euler product for the Riemann zeta function. -/
theorem riemannZeta_eulerProduct'  {s : ‚ÑÇ} (hs : 1 < s.re) :
    exp (‚àë' p : Nat.Primes, -Complex.log (1 - p ^ (-s))) = riemannZeta s :=
  LSeries_one_eq_riemannZeta hs ‚ñ∏ ArithmeticFunction.LSeries_zeta_eulerProduct' hs

end EulerProduct


lemma summable_neg_log_one_sub_char_mul_prime_cpow {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) {s : ‚ÑÇ}
    (hs : 1 < s.re) :
    Summable fun p : Nat.Primes ‚Ü¶ -log (1 - œá p * (p : ‚ÑÇ) ^ (-s)) := by
  have (p : Nat.Primes) : ‚Äñœá p * (p : ‚ÑÇ) ^ (-s)‚Äñ ‚â§ (p : ‚Ñù) ^ (-s).re := by
    rw [norm_mul, norm_natCast_cpow_of_re_ne_zero _ <| re_neg_ne_zero_of_one_lt_re hs]
    calc ‚Äñœá p‚Äñ * (p : ‚Ñù) ^ (-s).re
      _ ‚â§ 1 * (p : ‚Ñù) ^ (-s.re) := by gcongr; exact DirichletCharacter.norm_le_one œá _
      _ = _ := one_mul _
  refine (Nat.Primes.summable_rpow.mpr ?_).of_nonneg_of_le (fun _ ‚Ü¶ norm_nonneg _) this
    |>.of_norm.neg_clog_one_sub
  simp only [neg_re, neg_lt_neg_iff, hs]

/-- A technical lemma showing that a certain linear combination of real parts of logarithms
is nonnegative. This is used to show non-vanishing of the Riemann zeta function and of
Dirichlet L-series on the line `re s = 1`. -/
lemma re_log_comb_nonneg' {a : ‚Ñù} (ha‚ÇÄ : 0 ‚â§ a) (ha‚ÇÅ : a < 1) {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ = 1) :
      0 ‚â§ 3 * (-log (1 - a)).re + 4 * (-log (1 - a * z)).re + (-log (1 - a * z ^ 2)).re := by
  have hac‚ÇÄ : ‚Äñ(a : ‚ÑÇ)‚Äñ < 1 := by
    simp only [norm_eq_abs, abs_ofReal, _root_.abs_of_nonneg ha‚ÇÄ, ha‚ÇÅ]
  have hac‚ÇÅ : ‚Äña * z‚Äñ < 1 := by rwa [norm_mul, hz, mul_one]
  have hac‚ÇÇ : ‚Äña * z ^ 2‚Äñ < 1 := by rwa [norm_mul, norm_pow, hz, one_pow, mul_one]
  have H‚ÇÄ := (hasSum_re <| hasSum_taylorSeries_neg_log hac‚ÇÄ).mul_left 3
  have H‚ÇÅ := (hasSum_re <| hasSum_taylorSeries_neg_log hac‚ÇÅ).mul_left 4
  have H‚ÇÇ := hasSum_re <| hasSum_taylorSeries_neg_log hac‚ÇÇ
  rw [‚Üê ((H‚ÇÄ.add H‚ÇÅ).add H‚ÇÇ).tsum_eq]; clear H‚ÇÄ H‚ÇÅ H‚ÇÇ
  refine tsum_nonneg fun n ‚Ü¶ ?_
  simp only [mul_pow, ‚Üê ofReal_pow, div_natCast_re, ofReal_re, mul_re, ofReal_im, zero_mul,
    sub_zero]
  rcases n.eq_zero_or_pos with rfl | hn
  ¬∑ simp
  field_simp
  refine div_nonneg ?_ n.cast_nonneg
  rw [‚Üê pow_mul, pow_mul', sq, mul_re, ‚Üê sq, ‚Üê sq, ‚Üê sq_abs_sub_sq_re, ‚Üê norm_eq_abs, norm_pow, hz]
  calc
    0 ‚â§ 2 * a ^ n * ((z ^ n).re + 1) ^ 2 := by positivity
    _ = _  := by ring

/-- The logarithm of an Euler factor of the product `L(œá^0, x)^3 * L(œá, x+I*y)^4 * L(œá^2, x+2*I*y)`
has nonnegative real part when `s = x + I*y` has real part `x > 1`. -/
lemma re_log_comb_nonneg_dirichlet {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) {n : ‚Ñï} (hn : 2 ‚â§ n)
    {x y : ‚Ñù} (hx : 1 < x) :
    0 ‚â§ 3 * (-log (1 - (1 : DirichletCharacter ‚ÑÇ N) n * n ^ (-x : ‚ÑÇ))).re +
          4 * (-log (1 - œá n * n ^ (-(x + I * y)))).re +
          (-log (1 - (œá n ^ 2) * n ^ (-(x + 2 * I * y)))).re := by
  by_cases hn' : IsUnit (n : ZMod N)
  ¬∑ have ha‚ÇÄ : 0 ‚â§ (n : ‚Ñù) ^ (-x) := Real.rpow_nonneg n.cast_nonneg _
    have ha‚ÇÅ : (n : ‚Ñù) ^ (-x) < 1 := by
      simpa only [Real.rpow_lt_one_iff n.cast_nonneg, Nat.cast_eq_zero, Nat.one_lt_cast,
        Left.neg_neg_iff, Nat.cast_lt_one, Left.neg_pos_iff]
        using Or.inr <| Or.inl ‚ü®hn, zero_lt_one.trans hx‚ü©
    have hz : ‚Äñœá n * (n : ‚ÑÇ) ^ (-(I * y))‚Äñ = 1 := by
      rw [norm_mul, ‚Üê hn'.unit_spec, DirichletCharacter.unit_norm_eq_one œá hn'.unit, one_mul,
        norm_eq_abs, abs_cpow_of_imp fun h ‚Ü¶ False.elim <| by linarith [Nat.cast_eq_zero.mp h, hn]]
      simp
    rw [MulChar.one_apply hn', one_mul]
    convert re_log_comb_nonneg' ha‚ÇÄ ha‚ÇÅ hz using 6
    ¬∑ congr 2
      exact_mod_cast (ofReal_cpow n.cast_nonneg (-x)).symm
    ¬∑ congr 2
      rw [neg_add, cpow_add _ _ <| by norm_cast; linarith, ‚Üê ofReal_neg,
        ofReal_cpow n.cast_nonneg (-x), ofReal_natCast]
      ring
    ¬∑ rw [neg_add, cpow_add _ _ <| by norm_cast; linarith, ‚Üê ofReal_neg,
        ofReal_cpow n.cast_nonneg (-x), ofReal_natCast,
        show -(2 * I * y) = (2 : ‚Ñï) * (-I * y) by ring, cpow_nat_mul]
      ring_nf
  ¬∑ simp [MulChar.map_nonunit _ hn']

-- A helper lemma used in the next two proofs
lemma one_lt_re_of_pos {x : ‚Ñù} (y : ‚Ñù) (hx : 0 < x) :
    1 < (1 + x : ‚ÑÇ).re ‚àß 1 < (1 + x + I * y).re ‚àß 1 < (1 + x + 2 * I * y).re := by
  simp only [add_re, one_re, ofReal_re, lt_add_iff_pos_right, hx, mul_re, I_re, zero_mul, I_im,
    ofReal_im, mul_zero, sub_self, add_zero, re_ofNat, im_ofNat, mul_one, mul_im, and_self]

section

open Nat ArithmeticFunction

/-- For positive `x` and nonzero `y` we have that
$|L(\chi^0, x)^3 \cdot L(\chi, x+iy)^4 \cdot L(\chi^2, x+2iy)| \ge 1$. -/
lemma norm_dirichlet_product_ge_one {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) {x : ‚Ñù} (hx : 0 < x)
    (y : ‚Ñù) :
    ‚ÄñL ‚Üó(1 : DirichletCharacter ‚ÑÇ N) (1 + x) ^ 3 * L ‚Üóœá (1 + x + I * y) ^ 4 *
      L ‚Üó(œá ^ 2 :) (1 + x + 2 * I * y)‚Äñ ‚â• 1 := by
  let œá‚ÇÄ := (1 : DirichletCharacter ‚ÑÇ N)
  have ‚ü®h‚ÇÄ, h‚ÇÅ, h‚ÇÇ‚ü© := one_lt_re_of_pos y hx
  have hx‚ÇÅ : 1 + (x : ‚ÑÇ) = (1 + x : ‚ÑÇ).re := by -- kills three goals of the `convert` below
    simp only [add_re, one_re, ofReal_re, ofReal_add, ofReal_one]
  have hsum‚ÇÄ :=
    (hasSum_re (summable_neg_log_one_sub_char_mul_prime_cpow œá‚ÇÄ h‚ÇÄ).hasSum).summable.mul_left 3
  have hsum‚ÇÅ :=
    (hasSum_re (summable_neg_log_one_sub_char_mul_prime_cpow œá h‚ÇÅ).hasSum).summable.mul_left 4
  have hsum‚ÇÇ :=
    (hasSum_re (summable_neg_log_one_sub_char_mul_prime_cpow (œá ^ 2) h‚ÇÇ).hasSum).summable
  rw [‚Üê DirichletCharacter.LSeries_eulerProduct' _ h‚ÇÄ,
    ‚Üê DirichletCharacter.LSeries_eulerProduct' œá h‚ÇÅ,
    ‚Üê DirichletCharacter.LSeries_eulerProduct' (œá ^ 2) h‚ÇÇ, ‚Üê exp_nat_mul, ‚Üê exp_nat_mul, ‚Üê exp_add,
    ‚Üê exp_add, norm_eq_abs, abs_exp]
  simp only [Nat.cast_ofNat, add_re, mul_re, re_ofNat, im_ofNat, zero_mul, sub_zero,
    Real.one_le_exp_iff]
  rw [re_tsum <| summable_neg_log_one_sub_char_mul_prime_cpow _ h‚ÇÄ,
    re_tsum <| summable_neg_log_one_sub_char_mul_prime_cpow _ h‚ÇÅ,
    re_tsum <| summable_neg_log_one_sub_char_mul_prime_cpow _ h‚ÇÇ, ‚Üê tsum_mul_left, ‚Üê tsum_mul_left,
    ‚Üê tsum_add hsum‚ÇÄ hsum‚ÇÅ, ‚Üê tsum_add (hsum‚ÇÄ.add hsum‚ÇÅ) hsum‚ÇÇ]
  convert tsum_nonneg fun p : Nat.Primes ‚Ü¶ re_log_comb_nonneg_dirichlet œá p.prop.two_le h‚ÇÄ
  rw [sq, sq, MulChar.mul_apply]

/-- For positive `x` and nonzero `y` we have that
$|\zeta(x)^3 \cdot \zeta(x+iy)^4 \cdot \zeta(x+2iy)| \ge 1$. -/
lemma norm_zeta_product_ge_one {x : ‚Ñù} (hx : 0 < x) (y : ‚Ñù) :
    ‚ÄñŒ∂ (1 + x) ^ 3 * Œ∂ (1 + x + I * y) ^ 4 * Œ∂ (1 + x + 2 * I * y)‚Äñ ‚â• 1 := by
  have ‚ü®h‚ÇÄ, h‚ÇÅ, h‚ÇÇ‚ü© := one_lt_re_of_pos y hx
  simpa only [one_pow, norm_mul, norm_pow, DirichletCharacter.LSeries_modOne_eq,
    LSeries_one_eq_riemannZeta, h‚ÇÄ, h‚ÇÅ, h‚ÇÇ] using norm_dirichlet_product_ge_one œá‚ÇÅ hx y

-- not sure we need this
/- open BigOperators Finset ZMod in
lemma prod_primesBelow_mul_eq_prod_primesBelow {N : ‚Ñï} (hN : N ‚â† 0) {s : ‚ÑÇ} (hs : 1 < s.re)
    {n : ‚Ñï} (hn : N < n) :
    (‚àè p in primesBelow n, (1 - (p : ‚ÑÇ) ^ (-s))‚Åª¬π) * (‚àè p in N.primeFactors, (1 - (p : ‚ÑÇ) ^ (-s))) =
        ‚àè p in primesBelow n, (1 - (1 : DirichletCharacter ‚ÑÇ N) p * (p : ‚ÑÇ) ^ (-s))‚Åª¬π := by
  letI Œµ : DirichletCharacter ‚ÑÇ N := 1
  rw [mul_comm]
  have hd : Disjoint N.primeFactors (n.primesBelow.filter (¬∑ ‚àâ N.primeFactors)) := by
    convert disjoint_filter_filter_neg N.primeFactors n.primesBelow (¬∑ ‚àà N.primeFactors)
    rw [filter_mem_eq_inter, inter_self]
  have hdeq : disjUnion _ _ hd = primesBelow n := by
    simp only [disjUnion_eq_union]
    ext p
    simp only [mem_union, mem_filter]
    refine ‚ü®fun H' ‚Ü¶ H'.elim (fun H ‚Ü¶ ?_) fun H ‚Ü¶ H.1, fun _ ‚Ü¶ by tauto‚ü©
    exact mem_primesBelow.mpr ‚ü®(le_of_mem_primeFactors H).trans_lt hn, prime_of_mem_primeFactors H‚ü©
  have H‚ÇÅ := hdeq ‚ñ∏ prod_disjUnion (f := fun p : ‚Ñï ‚Ü¶ (1 - Œµ p * (p : ‚ÑÇ) ^ (-s))‚Åª¬π) hd
  have H‚ÇÇ := hdeq ‚ñ∏ prod_disjUnion (f := fun p : ‚Ñï ‚Ü¶ (1 - (p : ‚ÑÇ) ^ (-s))‚Åª¬π) hd
  have H‚ÇÉ : ‚àè p in N.primeFactors, (1 - Œµ p * (p : ‚ÑÇ) ^ (-s))‚Åª¬π = 1 := by
    refine prod_eq_one fun p hp ‚Ü¶ ?_
    rw [MulChar.map_nonunit _ <| not_isUnit_of_mem_primeFactors hp, zero_mul, sub_zero, inv_one]
  rw [H‚ÇÅ, H‚ÇÇ, H‚ÇÉ, one_mul, ‚Üê mul_assoc, ‚Üê prod_mul_distrib]; clear H‚ÇÅ H‚ÇÇ H‚ÇÉ
  conv => enter [2]; rw [‚Üê one_mul (‚àè p in (n.primesBelow.filter _), _)]
  congr 1
  ¬∑ exact prod_eq_one fun p hp ‚Ü¶
      mul_inv_cancel <| one_sub_prime_cpow_ne_zero (prime_of_mem_primeFactors hp) hs
  ¬∑ refine prod_congr rfl fun p hp ‚Ü¶ ?_
    simp only [mem_primeFactors, ne_eq, hN, not_false_eq_true, and_true, not_and, mem_filter] at hp
    have hp‚ÇÅ := (mem_primesBelow.mp hp.1).2
    rw [MulChar.one_apply <| isUnit_prime_of_not_dvd hp‚ÇÅ <| hp.2 hp‚ÇÅ, one_mul]

open BigOperators in
lemma LSeries.exists_extension_of_trivial {N : ‚Ñï} (hN : N ‚â† 0) {s : ‚ÑÇ} (hs : 1 < s.re) :
    L ‚Üó(1 : DirichletCharacter ‚ÑÇ N) s = Œ∂ s * ‚àè p in N.primeFactors, (1 - (p : ‚ÑÇ) ^ (-s)) := by
  have HŒ∂ := (riemannZeta_eulerProduct hs).mul_const (‚àè p in N.primeFactors, (1 - (p : ‚ÑÇ) ^ (-s)))
  have HL := dirichletLSeries_eulerProduct (1 : DirichletCharacter ‚ÑÇ N) hs
  have Hev : (fun n : ‚Ñï ‚Ü¶ (‚àè p in primesBelow n, (1 - (p : ‚ÑÇ) ^ (-s))‚Åª¬π) *
    (‚àè p in N.primeFactors, (1 - (p : ‚ÑÇ) ^ (-s)))) =·∂†[Filter.atTop]
      (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n,
        (1 - (1 : DirichletCharacter ‚ÑÇ N) p * (p : ‚ÑÇ) ^ (-s))‚Åª¬π) := by
    refine Filter.eventuallyEq_of_mem (s := {n | N < n}) ?_
      fun _ ‚Ü¶ prod_primesBelow_mul_eq_prod_primesBelow hN hs
    simp only [Filter.mem_atTop_sets, Set.mem_setOf_eq]
    exact ‚ü®N + 1, fun _ hm ‚Ü¶ hm‚ü©
  convert (tendsto_nhds_unique (Filter.Tendsto.congr' Hev HŒ∂) HL).symm using 1
  rw [LSeries]
  congr
  funext n
  simp only [dirichletSummandHom, MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk]
  rcases eq_or_ne n 0 with rfl | hn
  ¬∑ simp only [term_zero, cast_zero, CharP.cast_eq_zero, ne_eq, neg_eq_zero,
    ne_zero_of_one_lt_re hs, not_false_eq_true, zero_cpow, mul_zero]
  rw [LSeries.term_of_ne_zero hn, div_eq_mul_inv, cpow_neg] -/

end

section

open Filter Topology Homeomorph Asymptotics

lemma riemannZeta_isBigO_near_one_horizontal :
    (fun x : ‚Ñù ‚Ü¶ Œ∂ (1 + x)) =O[ùìù[>] 0] (fun x ‚Ü¶ (1 : ‚ÑÇ) / x) := by
  have : (fun w : ‚ÑÇ ‚Ü¶ Œ∂ (1 + w)) =O[ùìù[‚â†] 0] (1 / ¬∑) := by
    have H : Tendsto (fun w ‚Ü¶ w * Œ∂ (1 + w)) (ùìù[‚â†] 0) (ùìù 1) := by
      convert Tendsto.comp (f := fun w ‚Ü¶ 1 + w) riemannZeta_residue_one ?_ using 1
      ¬∑ ext w
        simp only [Function.comp_apply, add_sub_cancel_left]
      ¬∑ refine tendsto_iff_comap.mpr <| map_le_iff_le_comap.mp <| Eq.le ?_
        convert map_punctured_nhds_eq (Homeomorph.addLeft (1 : ‚ÑÇ)) 0 using 2 <;> simp
    exact ((isBigO_mul_iff_isBigO_div eventually_mem_nhdsWithin).mp <|
      Tendsto.isBigO_one ‚ÑÇ H).trans <| isBigO_refl ..
  exact (isBigO_comp_ofReal_nhds_ne this).mono <| nhds_right'_le_nhds_ne 0

lemma riemannZeta_isBigO_of_ne_one_horizontal {y : ‚Ñù} (hy : y ‚â† 0) :
    (fun x : ‚Ñù ‚Ü¶ Œ∂ (1 + x + I * y)) =O[ùìù[>] 0] (fun _ ‚Ü¶ (1 : ‚ÑÇ)) := by
  refine Asymptotics.IsBigO.mono ?_ nhdsWithin_le_nhds
  have hy' : 1 + I * y ‚â† 1 := by simp [hy]
  convert isBigO_comp_ofReal
    (differentiableAt_riemannZeta hy').continuousAt.isBigO using 3 with x
  ring

lemma riemannZeta_isBigO_near_root_horizontal {y : ‚Ñù} (hy : y ‚â† 0) (h : Œ∂ (1 + I * y) = 0) :
    (fun x : ‚Ñù ‚Ü¶ Œ∂ (1 + x + I * y)) =O[ùìù[>] 0] fun x : ‚Ñù ‚Ü¶ (x : ‚ÑÇ) := by
  have hy' : 1 + I * y ‚â† 1 := by simp [hy]
  conv => enter [2, x]; rw [add_comm 1, add_assoc]
  exact (isBigO_comp_ofReal <| (differentiableAt_riemannZeta hy').isBigO_of_eq_zero h).mono
    nhdsWithin_le_nhds

/-- The Riemann Zeta Function does not vanish on the closed half-plane `re z ‚â• 1`. -/
lemma riemannZeta_ne_zero_of_one_le_re ‚¶Éz : ‚ÑÇ‚¶Ñ (hz : z ‚â† 1) (hz' : 1 ‚â§ z.re) : Œ∂ z ‚â† 0 := by
  refine hz'.eq_or_lt.elim (fun h Hz ‚Ü¶ ?_) riemannZeta_ne_zero_of_one_lt_re
  -- We assume that `Œ∂ z = 0` and `z.re = 1` and derive a contradiction.
  have hz‚ÇÄ : z.im ‚â† 0 := by
    rw [‚Üê re_add_im z, ‚Üê h, ofReal_one] at hz
    simpa only [ne_eq, add_right_eq_self, mul_eq_zero, ofReal_eq_zero, I_ne_zero, or_false]
      using hz
  have hzeq : z = 1 + I * z.im := by
    rw [mul_comm I, ‚Üê re_add_im z, ‚Üê h]
    push_cast
    simp only [add_im, one_im, mul_im, ofReal_re, I_im, mul_one, ofReal_im, I_re, mul_zero,
      add_zero, zero_add]
  -- The key step: the vanishing assumption implies that the zeta product below
  -- also vanishes at `z`. We only need the right-hand limit keeping the imaginary part fixed.
  have H‚ÇÄ : (fun _ : ‚Ñù ‚Ü¶ (1 : ‚Ñù)) =O[ùìù[>] 0]
      (fun x ‚Ü¶ Œ∂ (1 + x) ^ 3 * Œ∂ (1 + x + I * z.im) ^ 4 * Œ∂ (1 + x + 2 * I * z.im)) :=
    IsBigO.of_bound' <| eventually_nhdsWithin_of_forall
      fun _ hx ‚Ü¶ (norm_one (Œ± := ‚Ñù)).symm ‚ñ∏ (norm_zeta_product_ge_one hx z.im).le
  have H := (riemannZeta_isBigO_near_one_horizontal.pow 3).mul
    ((riemannZeta_isBigO_near_root_horizontal hz‚ÇÄ (hzeq ‚ñ∏ Hz)).pow 4)|>.mul <|
    riemannZeta_isBigO_of_ne_one_horizontal <| mul_ne_zero two_ne_zero hz‚ÇÄ
  have help (x : ‚Ñù) : ((1 / x) ^ 3 * x ^ 4 * 1 : ‚ÑÇ) = x := by
    rcases eq_or_ne x 0 with rfl | h
    ¬∑ rw [ofReal_zero, zero_pow (by norm_num), mul_zero, mul_one]
    ¬∑ field_simp [h]
      ring
  conv at H => enter [3, x]; rw [help]
  conv at H =>
    enter [2, x]; rw [show 1 + x + I * ‚Üë(2 * z.im) = 1 + x + 2 * I * z.im by simp; ring]
  replace H := (H‚ÇÄ.trans H).norm_right
  simp only [norm_eq_abs, abs_ofReal] at H
  refine isLittleO_irrefl ?_ <| H.of_abs_right.trans_isLittleO <|
    isLittleO_id_one.mono nhdsWithin_le_nhds
  simp only [ne_eq, one_ne_zero, not_false_eq_true, frequently_true_iff_neBot]
  exact mem_closure_iff_nhdsWithin_neBot.mp <| closure_Ioi (0 : ‚Ñù) ‚ñ∏ Set.left_mem_Ici

end

/-!
### The logarithmic derivative of Œ∂ has a simple pole at s = 1 with residue -1

We show that `s ‚Ü¶ Œ∂' s / Œ∂ s + 1 / (s - 1)` (or rather, its negative, which is the function
we need for the Wiener-Ikehara Theorem) is continuous outside the zeros of `Œ∂`.
-/

/-- The function obtained by "multiplying away" the pole of `Œ∂`. Its (negative) logarithmic
derivative is the function used in the Wiener-Ikehara Theorem to prove the Prime Number
Theorem. -/
noncomputable def Œ∂‚ÇÅ : ‚ÑÇ ‚Üí ‚ÑÇ := Function.update (fun z ‚Ü¶ Œ∂ z * (z - 1)) 1 1

lemma Œ∂‚ÇÅ_apply_of_ne_one {z : ‚ÑÇ} (hz : z ‚â† 1) : Œ∂‚ÇÅ z = Œ∂ z * (z - 1) := by
  simp [Œ∂‚ÇÅ, hz]

lemma Œ∂‚ÇÅ_differentiable : Differentiable ‚ÑÇ Œ∂‚ÇÅ := by
  rw [‚Üê differentiableOn_univ,
    ‚Üê differentiableOn_compl_singleton_and_continuousAt_iff (c := 1) Filter.univ_mem, Œ∂‚ÇÅ]
  refine ‚ü®DifferentiableOn.congr (f := fun z ‚Ü¶ Œ∂ z * (z - 1))
    (fun _ hz ‚Ü¶ DifferentiableAt.differentiableWithinAt ?_) fun _ hz ‚Ü¶ ?_,
    continuousWithinAt_compl_self.mp ?_‚ü©
  ¬∑ simp only [Set.mem_diff, Set.mem_univ, Set.mem_singleton_iff, true_and] at hz
    exact (differentiableAt_riemannZeta hz).mul <| (differentiableAt_id').sub <|
      differentiableAt_const 1
  ¬∑ simp only [Set.mem_diff, Set.mem_univ, Set.mem_singleton_iff, true_and] at hz
    simp only [ne_eq, hz, not_false_eq_true, Function.update_noteq]
  ¬∑ conv in (_ * _) => rw [mul_comm]
    simp only [continuousWithinAt_compl_self, continuousAt_update_same]
    exact riemannZeta_residue_one

lemma deriv_Œ∂‚ÇÅ_apply_of_ne_one  {z : ‚ÑÇ} (hz : z ‚â† 1) :
    deriv Œ∂‚ÇÅ z = deriv Œ∂ z * (z - 1) + Œ∂ z := by
  have H : deriv Œ∂‚ÇÅ z = deriv (fun w ‚Ü¶ Œ∂ w * (w - 1)) z := by
    refine Filter.EventuallyEq.deriv_eq <| Filter.eventuallyEq_iff_exists_mem.mpr ?_
    refine ‚ü®{w | w ‚â† 1}, IsOpen.mem_nhds isOpen_ne hz, fun w hw ‚Ü¶ ?_‚ü©
    simp only [Œ∂‚ÇÅ, ne_eq, Set.mem_setOf.mp hw, not_false_eq_true, Function.update_noteq]
  rw [H, deriv_mul (differentiableAt_riemannZeta hz) <| differentiableAt_id'.sub <|
    differentiableAt_const 1, deriv_sub_const, deriv_id'', mul_one]

lemma neg_logDeriv_Œ∂‚ÇÅ_eq {z : ‚ÑÇ} (hz‚ÇÅ : z ‚â† 1) (hz‚ÇÇ : Œ∂ z ‚â† 0) :
    -deriv Œ∂‚ÇÅ z / Œ∂‚ÇÅ z = -deriv Œ∂ z / Œ∂ z - 1 / (z - 1) := by
  rw [Œ∂‚ÇÅ_apply_of_ne_one hz‚ÇÅ, deriv_Œ∂‚ÇÅ_apply_of_ne_one hz‚ÇÅ]
  field_simp [sub_ne_zero.mpr hz‚ÇÅ]
  ring

lemma continuousOn_neg_logDeriv_Œ∂‚ÇÅ :
    ContinuousOn (fun z ‚Ü¶ -deriv Œ∂‚ÇÅ z / Œ∂‚ÇÅ z) {z | z = 1 ‚à® Œ∂ z ‚â† 0} := by
  simp_rw [neg_div]
  refine ((Œ∂‚ÇÅ_differentiable.contDiff.continuous_deriv le_rfl).continuousOn.div
    Œ∂‚ÇÅ_differentiable.continuous.continuousOn fun w hw ‚Ü¶ ?_).neg
  rcases eq_or_ne w 1 with rfl | hw'
  ¬∑ simp only [Œ∂‚ÇÅ, Function.update_same, ne_eq, one_ne_zero, not_false_eq_true]
  ¬∑ simp only [ne_eq, Set.mem_setOf_eq, hw', false_or] at hw
    simp only [Œ∂‚ÇÅ, ne_eq, hw', not_false_eq_true, Function.update_noteq, _root_.mul_eq_zero, hw,
      false_or]
    exact sub_ne_zero.mpr hw'

/-!
### Derivation of the Prime Number Theorem from the Wiener-Ikehara Theorem
-/

open Filter Nat ArithmeticFunction in
/-- The *Wiener-Ikehara Theorem* implies the *Prime Number Theorem* in the form that
`œà x ‚àº x`, where `œà x = ‚àë n < x, Œõ n` and `Œõ` is the von Mangoldt function. -/
theorem PNT_vonMangoldt (WIT : WienerIkeharaTheorem) :
    Tendsto (fun N : ‚Ñï ‚Ü¶ ((Finset.range N).sum Œõ) / N) atTop (nhds 1) := by
  have hnv := riemannZeta_ne_zero_of_one_le_re
  refine WIT (F := fun z ‚Ü¶ -deriv Œ∂‚ÇÅ z / Œ∂‚ÇÅ z) (fun _ ‚Ü¶ vonMangoldt_nonneg) (fun s hs ‚Ü¶ ?_) ?_
  ¬∑ have hs‚ÇÅ : s ‚â† 1 := by
      rintro rfl
      simp at hs
    simp only [ne_eq, hs‚ÇÅ, not_false_eq_true, LSeries_vonMangoldt_eq_deriv_riemannZeta_div hs,
      ofReal_one]
    exact neg_logDeriv_Œ∂‚ÇÅ_eq hs‚ÇÅ <| hnv hs‚ÇÅ (Set.mem_setOf.mp hs).le
  ¬∑ refine continuousOn_neg_logDeriv_Œ∂‚ÇÅ.mono fun s _ ‚Ü¶ ?_
    specialize @hnv s
    simp at *
    tauto

import EulerProducts.EulerProduct
import Mathlib.NumberTheory.ZetaFunction
import Mathlib.NumberTheory.DirichletCharacter.Basic
import Mathlib.FieldTheory.Finite.Basic

/-!
## The Euler Product for the Riemann Zeta Function
-/

local macro_rules | `($x ^ $y)   => `(HPow.hPow $x $y)

section DirichletChar

variable {F : Type} [NormedField F]

lemma ZMod.exists_pos_unit_pow_eq_one : (n : ‚Ñï) ‚Üí ‚àÉ m : ‚Ñï, 0 < m ‚àß ‚àÄ a : (ZMod n)À£, a ^ m = 1 :=
fun
| 0     => ‚ü®2, zero_lt_two, Int.units_sq‚ü©
| n + 1 => ‚ü®n.succ.totient, Nat.totient_pos n.succ_pos, ZMod.pow_totient‚ü©

-- This will eventually show up in Mathlib (future PR by Ya√´l Dillies)
lemma pow_eq_one_iff_of_nonneg {R : Type*} [LinearOrderedRing R] {x : R} (hx : 0 ‚â§ x)
    {n : ‚Ñï} (hn : n ‚â† 0) : x ^ n = 1 ‚Üî x = 1 := by
  constructor
  ¬∑ intro h
    exact le_antisymm ((pow_le_one_iff_of_nonneg hx hn).mp h.le)
      ((one_le_pow_iff_of_nonneg hx hn).mp h.ge)
  ¬∑ rintro rfl
    exact one_pow _

lemma DirichletCharacter.norm_eq_one {n : ‚Ñï} (œá : DirichletCharacter F n) (m : (ZMod n)À£) :
    ‚Äñœá m‚Äñ = 1 := by
  obtain ‚ü®e, he‚ÇÄ, he‚ÇÅ‚ü© := ZMod.exists_pos_unit_pow_eq_one n
  refine (pow_eq_one_iff_of_nonneg (norm_nonneg _) he‚ÇÄ.ne').mp ?_
  rw [‚Üê norm_pow, ‚Üê map_pow, ‚Üê Units.val_pow_eq_pow_val, he‚ÇÅ m, Units.val_one, map_one, norm_one]

lemma DirichletCharacter.norm_le_one {n : ‚Ñï} (œá : DirichletCharacter F n) (m : ZMod n) :
    ‚Äñœá m‚Äñ ‚â§ 1 := by
  by_cases h : IsUnit m
  ¬∑ exact (DirichletCharacter.norm_eq_one œá h.unit).le
  ¬∑ rw [œá.map_nonunit h, norm_zero]
    exact zero_le_one

end DirichletChar

open Complex

-- should perhaps go to `Mathlib.Analysis.SpecialFunctions.Pow.Real`
lemma Nat.complex_norm_cpow_eq_rpow_re (n : ‚Ñï) {s : ‚ÑÇ} (h : s.re ‚â† 0) :
    ‚Äñ(n : ‚ÑÇ) ^ s‚Äñ = (n : ‚Ñù) ^ s.re := by
  rcases n.eq_zero_or_pos with rfl | H
  ¬∑ have hs : s ‚â† 0 := fun H ‚Ü¶ H ‚ñ∏ h <| rfl
    simp [zero_cpow hs, Real.zero_rpow h]
  ¬∑ exact abs_cpow_eq_rpow_re_of_pos (Nat.cast_pos.mpr H) s

/-- The `n`th summand in the Dirichlet series giving the Riemann Œ∂ function at `s`. -/
noncomputable
def riemannZetaSummand (s : ‚ÑÇ) (n : ‚Ñï) : ‚ÑÇ := (n : ‚ÑÇ) ^ (-s)

lemma riemannZetaSummand.mul (s : ‚ÑÇ) (m n : ‚Ñï) :
    riemannZetaSummand s (m * n) = riemannZetaSummand s m * riemannZetaSummand s n := by
  simpa [riemannZetaSummand] using mul_cpow_ofReal_nonneg m.cast_nonneg n.cast_nonneg _

variable {s : ‚ÑÇ}

/-- When `s ‚â† 0`, the map `n ‚Ü¶ n^(-s)` is completely multiplicative and vanishes at zero. -/
noncomputable
def riemannZetaSummandHom (hs : s ‚â† 0) : ‚Ñï ‚Üí*‚ÇÄ ‚ÑÇ where
  toFun := riemannZetaSummand s
  map_zero' := by simpa [riemannZetaSummand]
  map_one' := by simp [riemannZetaSummand]
  map_mul' := riemannZetaSummand.mul s

/-- When `œá` is a Dirichlet character and `s ‚â† 0`, the map `n ‚Ü¶ n^(-s)` is completely
multiplicative and vanishes at zero. -/
noncomputable
def dirichletSummandHom {n : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ n) (hs : s ‚â† 0) : ‚Ñï ‚Üí*‚ÇÄ ‚ÑÇ where
  toFun n := œá n * riemannZetaSummand s n
  map_zero' := by simp [riemannZetaSummand, hs]
  map_one' := by simp [riemannZetaSummand]
  map_mul' m n := by
    simpa only [Nat.cast_mul, IsUnit.mul_iff, not_and, map_mul, riemannZetaSummand.mul]
      using mul_mul_mul_comm ..

lemma Complex.ne_zero_of_one_lt_re (hs : 1 < s.re) : s ‚â† 0 :=
  fun h ‚Ü¶ ((zero_re ‚ñ∏ h ‚ñ∏ hs).trans zero_lt_one).false

lemma Complex.re_neg_ne_zero_of_one_lt_re (hs : 1 < s.re) : (-s).re ‚â† 0 := by
  intro h
  rw [neg_re, neg_eq_zero] at h
  exact lt_irrefl (1 : ‚Ñù) <| (h ‚ñ∏ hs).trans zero_lt_one

/-- When `s.re > 1`, the map `n ‚Ü¶ n^(-s)` is norm-summable. -/
lemma summable_riemannZetaSummand (hs : 1 < s.re) :
  Summable (fun n ‚Ü¶ ‚ÄñriemannZetaSummandHom (Complex.ne_zero_of_one_lt_re hs) n‚Äñ) := by
  simp only [riemannZetaSummandHom, riemannZetaSummand, MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk]
  convert Real.summable_nat_rpow_inv.mpr hs with n
  rw [n.complex_norm_cpow_eq_rpow_re <| Complex.re_neg_ne_zero_of_one_lt_re hs, neg_re,
    Real.rpow_neg <| Nat.cast_nonneg _]

/-- When `s.re > 1`, the map `n ‚Ü¶ œá(n) * n^(-s)` is norm-summable. -/
lemma summable_dirichletSummand {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) (hs : 1 < s.re) :
  Summable (fun n ‚Ü¶ ‚ÄñdirichletSummandHom œá (Complex.ne_zero_of_one_lt_re hs) n‚Äñ) := by
  simp only [dirichletSummandHom, MonoidWithZeroHom.coe_mk, ZeroHom.coe_mk, norm_mul]
  refine summable_of_nonneg_of_le (fun n ‚Ü¶ ?_) (fun n ‚Ü¶ ?_) <| summable_riemannZetaSummand hs
  ¬∑ positivity
  ¬∑ exact mul_le_of_le_one_left (norm_nonneg _) <| œá.norm_le_one n

open Filter Nat Topology BigOperators EulerProduct in
/-- The Euler product for the Riemann Œ∂ function, valid for `s.re > 1`. -/
theorem riemannZeta_eulerProduct (hs : 1 < s.re) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n, (1 - (p : ‚ÑÇ) ^ (-s))‚Åª¬π) atTop (ùìù (riemannZeta s))
    := by
  have hsum := summable_riemannZetaSummand hs
  convert euler_product_multiplicative hsum
  rw [zeta_eq_tsum_one_div_nat_add_one_cpow hs, tsum_eq_zero_add <| summable_of_summable_norm hsum,
    map_zero, zero_add]
  simp [riemannZetaSummandHom, riemannZetaSummand, cpow_neg]

open Filter Nat Topology BigOperators EulerProduct in
/-- The Euler product for Dirichlet L-series, valid for `s.re > 1`. -/
theorem dirichletLSeries_eulerProduct {N : ‚Ñï} (œá : DirichletCharacter ‚ÑÇ N) (hs : 1 < s.re) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àè p in primesBelow n, (1 - œá p * (p : ‚ÑÇ) ^ (-s))‚Åª¬π) atTop
      (ùìù (‚àë' n : ‚Ñï, dirichletSummandHom œá (Complex.ne_zero_of_one_lt_re hs) n)) := by
  convert euler_product_multiplicative <| summable_dirichletSummand œá hs
